{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1488274097000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1488274097000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1488274097000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1488274097000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1488274097000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1488274097000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1488274097000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1488274097000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1488274097000},{"_id":"themes/next/_config.yml","hash":"500aafecda4f302de5e2ee060e5de4643076c0ad","modified":1500105906055},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1488274097000},{"_id":"themes/next/gulpfile.coffee","hash":"b00e93c5c8667a4fbed71046dc93ce6784bf6257","modified":1488274097000},{"_id":"themes/next/package.json","hash":"a042faed34835a52505643aa2d841cd2dcf5dff6","modified":1488274097000},{"_id":"source/_posts/HTML的标签.md","hash":"30e03d6dbc42fb51557e7a8c3d8ee9c9d18b2c46","modified":1498806314481},{"_id":"source/_posts/css前传.md","hash":"d912495ac06d8c38e7054cccaa2e5a63be3a180a","modified":1500253105253},{"_id":"source/_posts/css选择器.md","hash":"78f844da2100b3efbf23d3fd1be7968c2590094c","modified":1497947872365},{"_id":"source/_posts/hexo添加评论和分享功能.md","hash":"4922835f3095a65a927624cfdc3caf56a238ec6f","modified":1496997920029},{"_id":"source/_posts/hexo的常用命令.md","hash":"e421b89cbfc8c35a5c434788c91954cd5c83466b","modified":1496989547190},{"_id":"source/_posts/hexo的搭建.md","hash":"6f2843086883dc6bc5fe6ae6793a7818f758071e","modified":1500107549078},{"_id":"source/_posts/html基础.md","hash":"c03b69091b4e6272ae9a65cd7fead99557ce7033","modified":1497076406782},{"_id":"source/_posts/webpack实现代码热更新.md","hash":"11442d04087ba1f60317ff5482ffbb125bc18ef8","modified":1506332707241},{"_id":"source/categories/index.md","hash":"6144abf43fbb9d97c1fa6054d9ddadfecf7a6879","modified":1505466149301},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1488274097000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1488274097000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1488274097000},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488274097000},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1488274097000},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1488274097000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1488274097000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1488274097000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1488274097000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1488274097000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1488274097000},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1488274097000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"40d01dc46d57f71c2ef635c45b295d4355456e90","modified":1488274097000},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1488274097000},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1488274097000},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1488274097000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1488274097000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1488274097000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1488274097000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1488274097000},{"_id":"themes/next/layout/post.swig","hash":"3f921cea1aa6146d1699198600a772a2710582e3","modified":1496993379607},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1488274097000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1488274097000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1488274097000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1488274097000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1488274097000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1488274097000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1488274097000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488274097000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488274097000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1488274097000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1488274097000},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1488274097000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1488274097000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b57650032ed47b8bd357ec4dcc02d872fdd0e3e1","modified":1488274097000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1488274097000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1488274097000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1488274097000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1488274097000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1488274097000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1488274097000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1488274097000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1488274097000},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1488274097000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1488274097000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1488274097000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1488274097000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1488274097000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1488274097000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1488274097000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1488274097000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1488274097000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1488274097000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1488274097000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1488274097000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1488274097000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1488274097000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1488274097000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1488274097000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1488274097000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1488274097000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1488274097000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1488274097000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1488274097000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488274097000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1488274097000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1488274097000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1488274097000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1488274097000},{"_id":"themes/next/source/uploads/avatar.jpg","hash":"cc72219202de912db306232995854ce802e0c049","modified":1496395851628},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488274097000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488274097000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488274097000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488274097000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488274097000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488274097000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1488274097000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1488274097000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1488274097000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1488274097000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1488274097000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"741f09b2ba4e440011c15f5d288b109b82c87f1b","modified":1488274097000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1488274097000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1488274097000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1488274097000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1488274097000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1488274097000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1488274097000},{"_id":"themes/next/layout/_partials/share/sharesdk.swig","hash":"03922aafe3fdeb44c193ffa59382deddcdfd407c","modified":1496992323091},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1488274097000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"ceb39c100c99900294ddee8b1ff81fcaf43873b5","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1488274097000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1488274097000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1488274097000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1488274097000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1488274097000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1488274097000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1488274097000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1488274097000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"54ca0acff29a414e2c1b7c1790db22f0c775604c","modified":1488274097000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1488274097000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1488274097000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1488274097000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1488274097000},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1488274097000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1488274097000},{"_id":"themes/next/source/js/src/utils.js","hash":"9ff232a2d39a513b811814480502e3eaac429c52","modified":1488274097000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1488274097000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1488274097000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1488274097000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1488274097000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1488274097000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1488274097000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1488274097000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1488274097000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1488274097000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1488274097000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1488274097000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1488274097000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1488274097000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1488274097000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1488274097000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1488274097000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1488274097000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1488274097000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1488274097000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1488274097000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1488274097000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1488274097000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1488274097000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1488274097000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1488274097000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1488274097000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1488274097000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1488274097000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1488274097000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1488274097000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1488274097000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1488274097000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488274097000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488274097000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1488274097000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1488274097000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1488274097000}],"Category":[{"name":"html","_id":"cj7zzu61l0003v4dn6odbjmdm"},{"name":"css","_id":"cj7zzu61y0007v4dnfz13632z"},{"name":"Hexo","_id":"cj7zzu629000bv4dnquacz1t4"},{"name":"node.js","_id":"cj7zzu62q000jv4dnpvjd8qfs"}],"Data":[],"Page":[{"title":"文章分类","subtitle":"目前两个分类","type":"catgories","date":"2017-06-02T09:15:43.000Z","comments":1,"_content":"\n[Hexo](/categories/Hexo/) (3)\n[html](/categories/html/) (2)\n[css](/categories/css/) (2)\n[javascript](/categories/javascript/) (0)\n[php](/categories/php/) (0)\n[node.js](/categories/node-js/) (1)\n[react.js](/categories/react-js/) (0)\n[vue.js](/categories/vue-js/) (0)\n[angular.js](/categories/angular-js/) (0)\n[mySQL](/categories/mySQL/) (0)\n[python](/categories/python/) (0)\n\n","source":"categories/index.md","raw":"---\ntitle: 文章分类\nsubtitle: 目前两个分类\ntype: \"catgories\"\ndate: 2017-06-02 17:15:43\ncomments: true\n---\n\n[Hexo](/categories/Hexo/) (3)\n[html](/categories/html/) (2)\n[css](/categories/css/) (2)\n[javascript](/categories/javascript/) (0)\n[php](/categories/php/) (0)\n[node.js](/categories/node-js/) (1)\n[react.js](/categories/react-js/) (0)\n[vue.js](/categories/vue-js/) (0)\n[angular.js](/categories/angular-js/) (0)\n[mySQL](/categories/mySQL/) (0)\n[python](/categories/python/) (0)\n\n","updated":"2017-09-15T09:02:29.301Z","path":"categories/index.html","layout":"page","_id":"cj7zzu61e0001v4dnll7uisdf","content":"<p><a href=\"/categories/Hexo/\">Hexo</a> (3)<br><a href=\"/categories/html/\">html</a> (2)<br><a href=\"/categories/css/\">css</a> (2)<br><a href=\"/categories/javascript/\">javascript</a> (0)<br><a href=\"/categories/php/\">php</a> (0)<br><a href=\"/categories/node-js/\">node.js</a> (1)<br><a href=\"/categories/react-js/\">react.js</a> (0)<br><a href=\"/categories/vue-js/\">vue.js</a> (0)<br><a href=\"/categories/angular-js/\">angular.js</a> (0)<br><a href=\"/categories/mySQL/\">mySQL</a> (0)<br><a href=\"/categories/python/\">python</a> (0)</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"/categories/Hexo/\">Hexo</a> (3)<br><a href=\"/categories/html/\">html</a> (2)<br><a href=\"/categories/css/\">css</a> (2)<br><a href=\"/categories/javascript/\">javascript</a> (0)<br><a href=\"/categories/php/\">php</a> (0)<br><a href=\"/categories/node-js/\">node.js</a> (1)<br><a href=\"/categories/react-js/\">react.js</a> (0)<br><a href=\"/categories/vue-js/\">vue.js</a> (0)<br><a href=\"/categories/angular-js/\">angular.js</a> (0)<br><a href=\"/categories/mySQL/\">mySQL</a> (0)<br><a href=\"/categories/python/\">python</a> (0)</p>\n"}],"Post":[{"title":"HTML的标签","date":"2017-06-10T06:35:00.000Z","_content":"\nHTML是如此的简单，相信大部分学过HTML的人都是这样觉得的，不得不说HTML的确没什么难的，只要几小时甚至几十分钟就能掌握，所以这篇文章我会着重讲一点HTML的学前知识。\n\n<!--more-->\n\n## 1.URL\n\nurl的中文翻译是统一资源定位器，通俗来讲，就是我们说的路径，路径又分为相对路径和绝对路径\n\n#### 相对路径\n从文件当前所在位置出发查找目标位置\n 1、目标文件与当前文件在同一文件夹下，直接写文件名\n ``` bash\n \tsrc=\"1.jpg\"\n ```\n 2、目标文件在子文件夹下，子文件夹名/文件名\n ``` bash\n \tsrc=\"images/1.jpg\"\n ```\n 3、目标文件在当前文件的上一级目录，../文件名\n ``` bash\n \tsrc=\"../1.jpg\"\n ```\n 4、目标文件在当前文件的上一级目录的子目录里  ../子目录名/文件名\n ``` bash\n \tsrc=\"../images/1.jpg\"\n ```\n\n当目标文件是当前站点下的文件时，可使用相对路径。\n\n#### 绝对路径 \n``` bash\nhttp://www.sohu.com/images/1.jpg\n协议名   主机名     目录名 文件名\n```\n``` bash\nftp://202.112.111.12/images/1.jpg\n协议名  主机IP地址   目录名 文件名\n```\n从最根本的协议开始完整的表述路径\n无论在哪个文件里都能找到目标路径\n当目标文件是其他主机上的文件时，必须使用绝对路径。\n\n## 常见的图片格式\n\nGIF  最多只支持256色。支持动画\nJPG  支持真彩色\nPNG  支持透明和半透明，支持真彩色\n\n## HTML文件\n\nHTML文件就是以.html、.htm、.xhtml等结尾的文件，用来编写HTML代码的\n\n#### 如何在HTML文件中编写代码和运行HTML文件\n\n编写HTML代码没有那么多纷繁复杂的配置和安装软件，在windows系统中只需要用自带的文本编辑器即能完成HTML代码的编写，也不需要编译，可以直接在浏览器中运行\n\n用文本编辑器打开HTML文件，右击 --> 打开方式 --> 选择记事本，即可在记事本开始编写HTML文件\n\n编写完HTML代码并保存后在浏览器中运行，同样右击 --> 打开方式 --> 选择浏览器，即可在浏览器中查看到效果\n\n附：当然，在实际工作中很少会直接使用系统自带的编辑器编写，初学者我推荐使用的编辑器可以是EditPlus，sublime text等编辑器\n\n## HTML的头部声明\n\n头部声明我们也叫<!DOCTYPE> 声明，在 HTML 4.01 中,<!DOCTYPE> 声明引用 DTD,因为 HTML 4.01 基于 SGML。DTD 是一套关于标记符的语法规则。它是XML1.0版规格得一部分,是html文件的验证机制,属于html文件组成的一部分。 DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。\n\nHTML5 不基于 SGML，所以不需要引用 DTD。\n\nDTD：三种文档类型：S（Strict）、T（Transitional）、F（Frameset）。 \nStrict：如果您需要干净的标记，免于表现层的混乱，请使用此类型。请与层叠样式表（CSS）配合使用 \n``` bash\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n```\nTransitional：DTD 可包含 W3C 所期望移入样式表的呈现属性和元素。如果您的读者使用了不支持层叠样式表（CSS）的浏览器以至于您不得不使用 HTML 的呈现特性时使用 \n``` bash\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n```\nFrameset： DTD 应当被用于带有框架的文档。除 frameset 元素取代了 body 元素之外，Frameset DTD 等同于 Transitional DTD \n``` bash\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\">\n```\n\nhtml5作为现在的主流方向，他的头部声明简单明了\n``` bash\n<!DOCTYPE HTML>\n```\n这就是HTML5的头部声明了\n\n## HTML的结构\n\n在HTML的结构中除却头部声明，他由一个html标签包裹，里面分为头标签head和主体标签body\n\n``` bash\n<!DOCTYPE HTML>\n<html>\n\t<head>\n\t\t这是头部\n\t</head>\n\t<body>\n\t\t这是主体\n\t</body>\n</html>\n```\n\n这些是每个HTML文件必须包含的元素\n\n## HTML标签的属性和属性值\n\nHTML标签的属性是用来描述标签的一些特性的，前一篇文章我们介绍到，标签就像一个个盒子，那么这些盒子必定会有不同的作用和形态以及材料，比如装水的瓶，它可以是玻璃的材料，长圆柱形；装饼干的盒子，它可以是铁的，长四方体。HTML的标签也是如此，不过它是用属性来描述这些特性，用属性值表现这些特性，比如一个标签它有长高，那么就用width描述长，height描述高，接受属性值表现特性，也可以为其加入边框或者背景颜色，如下\n``` bash\n<p width=\"100px\" height=\"100px\" background=\"red\">\n\t这是文本标签\n</p>\n```\n说明这个文本标签在页面中占有100px的长和100px的高\n\n附：px是像素点单位，网页中常用的长度单位，除此之外还有cm，rem等\n\n### head标签\n\nhead标签里的内容不会直接显示在页面的内容之中的，他主要是用来包裹用于声明页面性质和引用外部资源标签的父标签\n\n附：父标签与子标签\n\n当标签里面包裹着标签，我们就叫被包裹的标签为子标签，外层包裹的叫父标签，如\n``` bash\n<html>   // 父标签\n\t<head>   // 子标签\n\t\t这是head\n\t</head>\n</html>\n```\n\n#### head里常见的声明和外部资源引用标签\n\n##### 1.meta标签\n\nmeta标签的作用有：搜索引擎优化（SEO），定义页面使用语言，自动刷新并指向新的页面，实现网页转换时的动态效果，控制页面缓冲，网页定级评价，控制网页显示的窗口等！meta可以接受各种属性值，以确定网页在浏览器中的一些性质，这里我只说一个必不可少的，就是编码的声明，这个是确定页面能否在浏览器中解析正确，如果设置了不正确的编码格式，页面将会乱码（关于编码，可以百度HTML的编码格式，了解更多）\n\n``` bash\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t</head>\n\t<body>\n\t\t这是主体\n\t</body>\n</html>\n```\ncharset就是设置编码的格式的属性，UTF-8是通用的编码格式，中文编码格式为GBK\n\n##### 2.title标签\n\ntitle标签是用来设置页面在浏览器标签栏中的标题的\n\n``` bash\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>这是标题</title>\n\t</head>\n\t<body>\n\t\t这是主体\n\t</body>\n</html>\n```\n![title](http://orks6qu1s.bkt.clouddn.com/title.png)\n\n##### 3.引用外部资源的标签\n\n1.link标签\n引用样式标签，这里我不会讲解样式标签的作用，这将会在css时着重讲解\n``` bash\n<link rel=\"stylesheet\" href=\"样式文件所在目录的路径\">\n```\n2.script标签\n引用脚本文件，这将会在JavaScript中着重讲解\n``` bash\n<script src=\"脚本文件所在目录的路径\"></script>\n```\n\n## 主体body标签中的内容\n\nbody标签里的内容将是呈现在页面中用户看到的实际内容\n\n#### 图像img标签\n\n  必备属性：\n  src 定义图像的url\n\n  可选属性：\n  width  宽\n  height 高\n  alt  替代文字（多数情况下用title可替代alt，如果图片加载失败，显示在网页上的文字）\n``` bash\n<img src=\"路径\" alt=\"替代文字\">\n```\n#### 链接a标签\n  必备属性：\n  href  链接的目标路径\n\n  可选属性：\n  name  命名。命名后的a称之为锚点，可以作为链接目标\n  target  指定链接在什么样的窗口中打开\n      _self  默认。当前窗口\n\t  _blank  在新建的窗口中打开链接\n  （title、id、class）\n``` bash\n<a href=\"www.baidu.com\" target=\"_self\">这是一个链接</a>\n```\n\n  锚点链接：这是一个特殊的链接方式，可跳到本页面中一个特定位置，这个指向是一个标签属性中的命名锚记或是id。\n```bash\n<a href=\"#name\">点击跳转</a>\n\n<p id=\"name\">这是要跳转到地方</p>\n```\n\n  邮件链接：可以创建一个点击后发送邮件的链接\n```bash \n    <a href=\"mailto:senica@126.com?subject=邮件标题&cc=xxx@126.com&mcc=yyy@126.com\">发邮件</a>\n```\n####  Table标签\ntable是 HTML里的布局工具，前期可用于简单布局\n```bash \n  <table>\n    <tr>\n      <td>编号</td>\n      <td>姓名</td>\n    </tr>\n    <tr>\n    \t<td>1</td>\n    \t<td>Tom</td>\n    </tr>\n    <tr>\n    \t<td>1</td>\n    \t<td>Lucy</td>\n    </tr>\n  </table>\n```\n![table](http://orks6qu1s.bkt.clouddn.com/table.png)\n\ntable的组成由外层的table和横行tr，纵行td组成，\n  table的属性  width、height、border、bordercolor、bgcolor\n         background、cellspacing、cellpadding、align\n\n  tr的属性  height  align  vlign\n  td的属性  width height align vlign colspan  rowspan \n\n  table的可选标签：\n  caption  表格标题\n  ``` bash\n\t<table>\n\t\t<caption>这是表格标题</caption>\n\t</table>\n  ```\n  thead  表格头部\n  ``` bash\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<td>这是表头</td>\n\t\t\t</tr>\n\t\t</thead>\n\t</table>\n  ```\n  tbody  表格主体\n  ``` bash\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<td>这是表头</td>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td>这是表的主体</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n  ```\n  tfoot  表格尾部\n  ``` bash\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<td>这是表头</td>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td>这是表的主体</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t\t<tfoot>\n\t\t\t<tr>\n\t\t\t\t<td>这是表尾</td>\n\t\t\t</tr>\n\t\t</tfoot>\n\t</table>\n  ```\n#### 文本标签\n\n文本标签除了p标签外，还有span、i、b等标签\n\n#### <font color=#0099ff size=4 face=\"黑体\">行内元素与块级元素</font>\n<font color=#0099ff size=3 face=\"黑体\">\n\t在这里，我将着重讲解一下行内元素与块级元素，这将有助于我们更好的理解HTML元素\n</font>\n<font color=#97CC89 size=3 face=\"黑体\">\n\t什么是行内元素和块级元素？\n\t行内元素，顾名思义，就是多个元素能排在一行，当大于一行的长度，才会挤向下一行，就像一个大盒子，里面可以放小盒子，这个小盒子就是行内元素\n\t块级元素，自然就是那个大盒子，它是独占一行的元素，块级元素可以包裹行内元素，也可以包裹块级元素，但是行内元素不可以包裹块级元素\n\t常见的块级元素：p、div、h1等\n\t常见的行内元素：span、i、b等\n</font>\n\n\n<font color=#0099ff size=5 face=\"黑体\">\n\t一篇文章对于HTML标签的分享是有限的，更多的标签使用可以查看w3cSchool的html在线文档，[在线文档地址](https://www.w3cschool.cn/html/)\n</font>    ","source":"_posts/HTML的标签.md","raw":"---\ntitle: HTML的标签\ndate: 2017-06-10 14:35:00\ntags:\ncategories: html\n---\n\nHTML是如此的简单，相信大部分学过HTML的人都是这样觉得的，不得不说HTML的确没什么难的，只要几小时甚至几十分钟就能掌握，所以这篇文章我会着重讲一点HTML的学前知识。\n\n<!--more-->\n\n## 1.URL\n\nurl的中文翻译是统一资源定位器，通俗来讲，就是我们说的路径，路径又分为相对路径和绝对路径\n\n#### 相对路径\n从文件当前所在位置出发查找目标位置\n 1、目标文件与当前文件在同一文件夹下，直接写文件名\n ``` bash\n \tsrc=\"1.jpg\"\n ```\n 2、目标文件在子文件夹下，子文件夹名/文件名\n ``` bash\n \tsrc=\"images/1.jpg\"\n ```\n 3、目标文件在当前文件的上一级目录，../文件名\n ``` bash\n \tsrc=\"../1.jpg\"\n ```\n 4、目标文件在当前文件的上一级目录的子目录里  ../子目录名/文件名\n ``` bash\n \tsrc=\"../images/1.jpg\"\n ```\n\n当目标文件是当前站点下的文件时，可使用相对路径。\n\n#### 绝对路径 \n``` bash\nhttp://www.sohu.com/images/1.jpg\n协议名   主机名     目录名 文件名\n```\n``` bash\nftp://202.112.111.12/images/1.jpg\n协议名  主机IP地址   目录名 文件名\n```\n从最根本的协议开始完整的表述路径\n无论在哪个文件里都能找到目标路径\n当目标文件是其他主机上的文件时，必须使用绝对路径。\n\n## 常见的图片格式\n\nGIF  最多只支持256色。支持动画\nJPG  支持真彩色\nPNG  支持透明和半透明，支持真彩色\n\n## HTML文件\n\nHTML文件就是以.html、.htm、.xhtml等结尾的文件，用来编写HTML代码的\n\n#### 如何在HTML文件中编写代码和运行HTML文件\n\n编写HTML代码没有那么多纷繁复杂的配置和安装软件，在windows系统中只需要用自带的文本编辑器即能完成HTML代码的编写，也不需要编译，可以直接在浏览器中运行\n\n用文本编辑器打开HTML文件，右击 --> 打开方式 --> 选择记事本，即可在记事本开始编写HTML文件\n\n编写完HTML代码并保存后在浏览器中运行，同样右击 --> 打开方式 --> 选择浏览器，即可在浏览器中查看到效果\n\n附：当然，在实际工作中很少会直接使用系统自带的编辑器编写，初学者我推荐使用的编辑器可以是EditPlus，sublime text等编辑器\n\n## HTML的头部声明\n\n头部声明我们也叫<!DOCTYPE> 声明，在 HTML 4.01 中,<!DOCTYPE> 声明引用 DTD,因为 HTML 4.01 基于 SGML。DTD 是一套关于标记符的语法规则。它是XML1.0版规格得一部分,是html文件的验证机制,属于html文件组成的一部分。 DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。\n\nHTML5 不基于 SGML，所以不需要引用 DTD。\n\nDTD：三种文档类型：S（Strict）、T（Transitional）、F（Frameset）。 \nStrict：如果您需要干净的标记，免于表现层的混乱，请使用此类型。请与层叠样式表（CSS）配合使用 \n``` bash\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n```\nTransitional：DTD 可包含 W3C 所期望移入样式表的呈现属性和元素。如果您的读者使用了不支持层叠样式表（CSS）的浏览器以至于您不得不使用 HTML 的呈现特性时使用 \n``` bash\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n```\nFrameset： DTD 应当被用于带有框架的文档。除 frameset 元素取代了 body 元素之外，Frameset DTD 等同于 Transitional DTD \n``` bash\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\">\n```\n\nhtml5作为现在的主流方向，他的头部声明简单明了\n``` bash\n<!DOCTYPE HTML>\n```\n这就是HTML5的头部声明了\n\n## HTML的结构\n\n在HTML的结构中除却头部声明，他由一个html标签包裹，里面分为头标签head和主体标签body\n\n``` bash\n<!DOCTYPE HTML>\n<html>\n\t<head>\n\t\t这是头部\n\t</head>\n\t<body>\n\t\t这是主体\n\t</body>\n</html>\n```\n\n这些是每个HTML文件必须包含的元素\n\n## HTML标签的属性和属性值\n\nHTML标签的属性是用来描述标签的一些特性的，前一篇文章我们介绍到，标签就像一个个盒子，那么这些盒子必定会有不同的作用和形态以及材料，比如装水的瓶，它可以是玻璃的材料，长圆柱形；装饼干的盒子，它可以是铁的，长四方体。HTML的标签也是如此，不过它是用属性来描述这些特性，用属性值表现这些特性，比如一个标签它有长高，那么就用width描述长，height描述高，接受属性值表现特性，也可以为其加入边框或者背景颜色，如下\n``` bash\n<p width=\"100px\" height=\"100px\" background=\"red\">\n\t这是文本标签\n</p>\n```\n说明这个文本标签在页面中占有100px的长和100px的高\n\n附：px是像素点单位，网页中常用的长度单位，除此之外还有cm，rem等\n\n### head标签\n\nhead标签里的内容不会直接显示在页面的内容之中的，他主要是用来包裹用于声明页面性质和引用外部资源标签的父标签\n\n附：父标签与子标签\n\n当标签里面包裹着标签，我们就叫被包裹的标签为子标签，外层包裹的叫父标签，如\n``` bash\n<html>   // 父标签\n\t<head>   // 子标签\n\t\t这是head\n\t</head>\n</html>\n```\n\n#### head里常见的声明和外部资源引用标签\n\n##### 1.meta标签\n\nmeta标签的作用有：搜索引擎优化（SEO），定义页面使用语言，自动刷新并指向新的页面，实现网页转换时的动态效果，控制页面缓冲，网页定级评价，控制网页显示的窗口等！meta可以接受各种属性值，以确定网页在浏览器中的一些性质，这里我只说一个必不可少的，就是编码的声明，这个是确定页面能否在浏览器中解析正确，如果设置了不正确的编码格式，页面将会乱码（关于编码，可以百度HTML的编码格式，了解更多）\n\n``` bash\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t</head>\n\t<body>\n\t\t这是主体\n\t</body>\n</html>\n```\ncharset就是设置编码的格式的属性，UTF-8是通用的编码格式，中文编码格式为GBK\n\n##### 2.title标签\n\ntitle标签是用来设置页面在浏览器标签栏中的标题的\n\n``` bash\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>这是标题</title>\n\t</head>\n\t<body>\n\t\t这是主体\n\t</body>\n</html>\n```\n![title](http://orks6qu1s.bkt.clouddn.com/title.png)\n\n##### 3.引用外部资源的标签\n\n1.link标签\n引用样式标签，这里我不会讲解样式标签的作用，这将会在css时着重讲解\n``` bash\n<link rel=\"stylesheet\" href=\"样式文件所在目录的路径\">\n```\n2.script标签\n引用脚本文件，这将会在JavaScript中着重讲解\n``` bash\n<script src=\"脚本文件所在目录的路径\"></script>\n```\n\n## 主体body标签中的内容\n\nbody标签里的内容将是呈现在页面中用户看到的实际内容\n\n#### 图像img标签\n\n  必备属性：\n  src 定义图像的url\n\n  可选属性：\n  width  宽\n  height 高\n  alt  替代文字（多数情况下用title可替代alt，如果图片加载失败，显示在网页上的文字）\n``` bash\n<img src=\"路径\" alt=\"替代文字\">\n```\n#### 链接a标签\n  必备属性：\n  href  链接的目标路径\n\n  可选属性：\n  name  命名。命名后的a称之为锚点，可以作为链接目标\n  target  指定链接在什么样的窗口中打开\n      _self  默认。当前窗口\n\t  _blank  在新建的窗口中打开链接\n  （title、id、class）\n``` bash\n<a href=\"www.baidu.com\" target=\"_self\">这是一个链接</a>\n```\n\n  锚点链接：这是一个特殊的链接方式，可跳到本页面中一个特定位置，这个指向是一个标签属性中的命名锚记或是id。\n```bash\n<a href=\"#name\">点击跳转</a>\n\n<p id=\"name\">这是要跳转到地方</p>\n```\n\n  邮件链接：可以创建一个点击后发送邮件的链接\n```bash \n    <a href=\"mailto:senica@126.com?subject=邮件标题&cc=xxx@126.com&mcc=yyy@126.com\">发邮件</a>\n```\n####  Table标签\ntable是 HTML里的布局工具，前期可用于简单布局\n```bash \n  <table>\n    <tr>\n      <td>编号</td>\n      <td>姓名</td>\n    </tr>\n    <tr>\n    \t<td>1</td>\n    \t<td>Tom</td>\n    </tr>\n    <tr>\n    \t<td>1</td>\n    \t<td>Lucy</td>\n    </tr>\n  </table>\n```\n![table](http://orks6qu1s.bkt.clouddn.com/table.png)\n\ntable的组成由外层的table和横行tr，纵行td组成，\n  table的属性  width、height、border、bordercolor、bgcolor\n         background、cellspacing、cellpadding、align\n\n  tr的属性  height  align  vlign\n  td的属性  width height align vlign colspan  rowspan \n\n  table的可选标签：\n  caption  表格标题\n  ``` bash\n\t<table>\n\t\t<caption>这是表格标题</caption>\n\t</table>\n  ```\n  thead  表格头部\n  ``` bash\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<td>这是表头</td>\n\t\t\t</tr>\n\t\t</thead>\n\t</table>\n  ```\n  tbody  表格主体\n  ``` bash\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<td>这是表头</td>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td>这是表的主体</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n  ```\n  tfoot  表格尾部\n  ``` bash\n\t<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<td>这是表头</td>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t<tr>\n\t\t\t\t<td>这是表的主体</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t\t<tfoot>\n\t\t\t<tr>\n\t\t\t\t<td>这是表尾</td>\n\t\t\t</tr>\n\t\t</tfoot>\n\t</table>\n  ```\n#### 文本标签\n\n文本标签除了p标签外，还有span、i、b等标签\n\n#### <font color=#0099ff size=4 face=\"黑体\">行内元素与块级元素</font>\n<font color=#0099ff size=3 face=\"黑体\">\n\t在这里，我将着重讲解一下行内元素与块级元素，这将有助于我们更好的理解HTML元素\n</font>\n<font color=#97CC89 size=3 face=\"黑体\">\n\t什么是行内元素和块级元素？\n\t行内元素，顾名思义，就是多个元素能排在一行，当大于一行的长度，才会挤向下一行，就像一个大盒子，里面可以放小盒子，这个小盒子就是行内元素\n\t块级元素，自然就是那个大盒子，它是独占一行的元素，块级元素可以包裹行内元素，也可以包裹块级元素，但是行内元素不可以包裹块级元素\n\t常见的块级元素：p、div、h1等\n\t常见的行内元素：span、i、b等\n</font>\n\n\n<font color=#0099ff size=5 face=\"黑体\">\n\t一篇文章对于HTML标签的分享是有限的，更多的标签使用可以查看w3cSchool的html在线文档，[在线文档地址](https://www.w3cschool.cn/html/)\n</font>    ","slug":"HTML的标签","published":1,"updated":"2017-06-30T07:05:14.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7zzu6140000v4dnu0tr4p40","content":"<p>HTML是如此的简单，相信大部分学过HTML的人都是这样觉得的，不得不说HTML的确没什么难的，只要几小时甚至几十分钟就能掌握，所以这篇文章我会着重讲一点HTML的学前知识。</p>\n<a id=\"more\"></a>\n<h2 id=\"1-URL\"><a href=\"#1-URL\" class=\"headerlink\" title=\"1.URL\"></a>1.URL</h2><p>url的中文翻译是统一资源定位器，通俗来讲，就是我们说的路径，路径又分为相对路径和绝对路径</p>\n<h4 id=\"相对路径\"><a href=\"#相对路径\" class=\"headerlink\" title=\"相对路径\"></a>相对路径</h4><p>从文件当前所在位置出发查找目标位置<br> 1、目标文件与当前文件在同一文件夹下，直接写文件名<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">src=<span class=\"string\">\"1.jpg\"</span></div></pre></td></tr></table></figure></p>\n<p> 2、目标文件在子文件夹下，子文件夹名/文件名<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">src=<span class=\"string\">\"images/1.jpg\"</span></div></pre></td></tr></table></figure></p>\n<p> 3、目标文件在当前文件的上一级目录，../文件名<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">src=<span class=\"string\">\"../1.jpg\"</span></div></pre></td></tr></table></figure></p>\n<p> 4、目标文件在当前文件的上一级目录的子目录里  ../子目录名/文件名<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">src=<span class=\"string\">\"../images/1.jpg\"</span></div></pre></td></tr></table></figure></p>\n<p>当目标文件是当前站点下的文件时，可使用相对路径。</p>\n<h4 id=\"绝对路径\"><a href=\"#绝对路径\" class=\"headerlink\" title=\"绝对路径\"></a>绝对路径</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.sohu.com/images/1.jpg</div><div class=\"line\">协议名   主机名     目录名 文件名</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ftp://202.112.111.12/images/1.jpg</div><div class=\"line\">协议名  主机IP地址   目录名 文件名</div></pre></td></tr></table></figure>\n<p>从最根本的协议开始完整的表述路径<br>无论在哪个文件里都能找到目标路径<br>当目标文件是其他主机上的文件时，必须使用绝对路径。</p>\n<h2 id=\"常见的图片格式\"><a href=\"#常见的图片格式\" class=\"headerlink\" title=\"常见的图片格式\"></a>常见的图片格式</h2><p>GIF  最多只支持256色。支持动画<br>JPG  支持真彩色<br>PNG  支持透明和半透明，支持真彩色</p>\n<h2 id=\"HTML文件\"><a href=\"#HTML文件\" class=\"headerlink\" title=\"HTML文件\"></a>HTML文件</h2><p>HTML文件就是以.html、.htm、.xhtml等结尾的文件，用来编写HTML代码的</p>\n<h4 id=\"如何在HTML文件中编写代码和运行HTML文件\"><a href=\"#如何在HTML文件中编写代码和运行HTML文件\" class=\"headerlink\" title=\"如何在HTML文件中编写代码和运行HTML文件\"></a>如何在HTML文件中编写代码和运行HTML文件</h4><p>编写HTML代码没有那么多纷繁复杂的配置和安装软件，在windows系统中只需要用自带的文本编辑器即能完成HTML代码的编写，也不需要编译，可以直接在浏览器中运行</p>\n<p>用文本编辑器打开HTML文件，右击 –&gt; 打开方式 –&gt; 选择记事本，即可在记事本开始编写HTML文件</p>\n<p>编写完HTML代码并保存后在浏览器中运行，同样右击 –&gt; 打开方式 –&gt; 选择浏览器，即可在浏览器中查看到效果</p>\n<p>附：当然，在实际工作中很少会直接使用系统自带的编辑器编写，初学者我推荐使用的编辑器可以是EditPlus，sublime text等编辑器</p>\n<h2 id=\"HTML的头部声明\"><a href=\"#HTML的头部声明\" class=\"headerlink\" title=\"HTML的头部声明\"></a>HTML的头部声明</h2><p>头部声明我们也叫&lt;!DOCTYPE&gt; 声明，在 HTML 4.01 中,&lt;!DOCTYPE&gt; 声明引用 DTD,因为 HTML 4.01 基于 SGML。DTD 是一套关于标记符的语法规则。它是XML1.0版规格得一部分,是html文件的验证机制,属于html文件组成的一部分。 DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。</p>\n<p>HTML5 不基于 SGML，所以不需要引用 DTD。</p>\n<p>DTD：三种文档类型：S（Strict）、T（Transitional）、F（Frameset）。<br>Strict：如果您需要干净的标记，免于表现层的混乱，请使用此类型。请与层叠样式表（CSS）配合使用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/html4/strict.dtd\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>Transitional：DTD 可包含 W3C 所期望移入样式表的呈现属性和元素。如果您的读者使用了不支持层叠样式表（CSS）的浏览器以至于您不得不使用 HTML 的呈现特性时使用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>Frameset： DTD 应当被用于带有框架的文档。除 frameset 元素取代了 body 元素之外，Frameset DTD 等同于 Transitional DTD<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01 Frameset//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/html4/frameset.dtd\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>html5作为现在的主流方向，他的头部声明简单明了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE HTML&gt;</div></pre></td></tr></table></figure></p>\n<p>这就是HTML5的头部声明了</p>\n<h2 id=\"HTML的结构\"><a href=\"#HTML的结构\" class=\"headerlink\" title=\"HTML的结构\"></a>HTML的结构</h2><p>在HTML的结构中除却头部声明，他由一个html标签包裹，里面分为头标签head和主体标签body</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE HTML&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">\t&lt;head&gt;</div><div class=\"line\">\t\t这是头部</div><div class=\"line\">\t&lt;/head&gt;</div><div class=\"line\">\t&lt;body&gt;</div><div class=\"line\">\t\t这是主体</div><div class=\"line\">\t&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>这些是每个HTML文件必须包含的元素</p>\n<h2 id=\"HTML标签的属性和属性值\"><a href=\"#HTML标签的属性和属性值\" class=\"headerlink\" title=\"HTML标签的属性和属性值\"></a>HTML标签的属性和属性值</h2><p>HTML标签的属性是用来描述标签的一些特性的，前一篇文章我们介绍到，标签就像一个个盒子，那么这些盒子必定会有不同的作用和形态以及材料，比如装水的瓶，它可以是玻璃的材料，长圆柱形；装饼干的盒子，它可以是铁的，长四方体。HTML的标签也是如此，不过它是用属性来描述这些特性，用属性值表现这些特性，比如一个标签它有长高，那么就用width描述长，height描述高，接受属性值表现特性，也可以为其加入边框或者背景颜色，如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p width=<span class=\"string\">\"100px\"</span> height=<span class=\"string\">\"100px\"</span> background=<span class=\"string\">\"red\"</span>&gt;</div><div class=\"line\">\t这是文本标签</div><div class=\"line\">&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>说明这个文本标签在页面中占有100px的长和100px的高</p>\n<p>附：px是像素点单位，网页中常用的长度单位，除此之外还有cm，rem等</p>\n<h3 id=\"head标签\"><a href=\"#head标签\" class=\"headerlink\" title=\"head标签\"></a>head标签</h3><p>head标签里的内容不会直接显示在页面的内容之中的，他主要是用来包裹用于声明页面性质和引用外部资源标签的父标签</p>\n<p>附：父标签与子标签</p>\n<p>当标签里面包裹着标签，我们就叫被包裹的标签为子标签，外层包裹的叫父标签，如<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;   // 父标签</div><div class=\"line\">\t&lt;head&gt;   // 子标签</div><div class=\"line\">\t\t这是head</div><div class=\"line\">\t&lt;/head&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"head里常见的声明和外部资源引用标签\"><a href=\"#head里常见的声明和外部资源引用标签\" class=\"headerlink\" title=\"head里常见的声明和外部资源引用标签\"></a>head里常见的声明和外部资源引用标签</h4><h5 id=\"1-meta标签\"><a href=\"#1-meta标签\" class=\"headerlink\" title=\"1.meta标签\"></a>1.meta标签</h5><p>meta标签的作用有：搜索引擎优化（SEO），定义页面使用语言，自动刷新并指向新的页面，实现网页转换时的动态效果，控制页面缓冲，网页定级评价，控制网页显示的窗口等！meta可以接受各种属性值，以确定网页在浏览器中的一些性质，这里我只说一个必不可少的，就是编码的声明，这个是确定页面能否在浏览器中解析正确，如果设置了不正确的编码格式，页面将会乱码（关于编码，可以百度HTML的编码格式，了解更多）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">\t&lt;head&gt;</div><div class=\"line\">\t\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</div><div class=\"line\">\t&lt;/head&gt;</div><div class=\"line\">\t&lt;body&gt;</div><div class=\"line\">\t\t这是主体</div><div class=\"line\">\t&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>charset就是设置编码的格式的属性，UTF-8是通用的编码格式，中文编码格式为GBK</p>\n<h5 id=\"2-title标签\"><a href=\"#2-title标签\" class=\"headerlink\" title=\"2.title标签\"></a>2.title标签</h5><p>title标签是用来设置页面在浏览器标签栏中的标题的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">\t&lt;head&gt;</div><div class=\"line\">\t\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</div><div class=\"line\">\t\t&lt;title&gt;这是标题&lt;/title&gt;</div><div class=\"line\">\t&lt;/head&gt;</div><div class=\"line\">\t&lt;body&gt;</div><div class=\"line\">\t\t这是主体</div><div class=\"line\">\t&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/title.png\" alt=\"title\"></p>\n<h5 id=\"3-引用外部资源的标签\"><a href=\"#3-引用外部资源的标签\" class=\"headerlink\" title=\"3.引用外部资源的标签\"></a>3.引用外部资源的标签</h5><p>1.link标签<br>引用样式标签，这里我不会讲解样式标签的作用，这将会在css时着重讲解<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"样式文件所在目录的路径\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>2.script标签<br>引用脚本文件，这将会在JavaScript中着重讲解<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"脚本文件所在目录的路径\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"主体body标签中的内容\"><a href=\"#主体body标签中的内容\" class=\"headerlink\" title=\"主体body标签中的内容\"></a>主体body标签中的内容</h2><p>body标签里的内容将是呈现在页面中用户看到的实际内容</p>\n<h4 id=\"图像img标签\"><a href=\"#图像img标签\" class=\"headerlink\" title=\"图像img标签\"></a>图像img标签</h4><p>  必备属性：<br>  src 定义图像的url</p>\n<p>  可选属性：<br>  width  宽<br>  height 高<br>  alt  替代文字（多数情况下用title可替代alt，如果图片加载失败，显示在网页上的文字）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"路径\"</span> alt=<span class=\"string\">\"替代文字\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"链接a标签\"><a href=\"#链接a标签\" class=\"headerlink\" title=\"链接a标签\"></a>链接a标签</h4><p>  必备属性：<br>  href  链接的目标路径</p>\n<p>  可选属性：<br>  name  命名。命名后的a称之为锚点，可以作为链接目标<br>  target  指定链接在什么样的窗口中打开<br>      _self  默认。当前窗口<br>      _blank  在新建的窗口中打开链接<br>  （title、id、class）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"www.baidu.com\"</span> target=<span class=\"string\">\"_self\"</span>&gt;这是一个链接&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p>  锚点链接：这是一个特殊的链接方式，可跳到本页面中一个特定位置，这个指向是一个标签属性中的命名锚记或是id。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"#name\"</span>&gt;点击跳转&lt;/a&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;p id=<span class=\"string\">\"name\"</span>&gt;这是要跳转到地方&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>  邮件链接：可以创建一个点击后发送邮件的链接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"mailto:senica@126.com?subject=邮件标题&amp;cc=xxx@126.com&amp;mcc=yyy@126.com\"</span>&gt;发邮件&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Table标签\"><a href=\"#Table标签\" class=\"headerlink\" title=\"Table标签\"></a>Table标签</h4><p>table是 HTML里的布局工具，前期可用于简单布局<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">  &lt;tr&gt;</div><div class=\"line\">    &lt;td&gt;编号&lt;/td&gt;</div><div class=\"line\">    &lt;td&gt;姓名&lt;/td&gt;</div><div class=\"line\">  &lt;/tr&gt;</div><div class=\"line\">  &lt;tr&gt;</div><div class=\"line\">  \t&lt;td&gt;1&lt;/td&gt;</div><div class=\"line\">  \t&lt;td&gt;Tom&lt;/td&gt;</div><div class=\"line\">  &lt;/tr&gt;</div><div class=\"line\">  &lt;tr&gt;</div><div class=\"line\">  \t&lt;td&gt;1&lt;/td&gt;</div><div class=\"line\">  \t&lt;td&gt;Lucy&lt;/td&gt;</div><div class=\"line\">  &lt;/tr&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/table.png\" alt=\"table\"></p>\n<p>table的组成由外层的table和横行tr，纵行td组成，<br>  table的属性  width、height、border、bordercolor、bgcolor<br>         background、cellspacing、cellpadding、align</p>\n<p>  tr的属性  height  align  vlign<br>  td的属性  width height align vlign colspan  rowspan </p>\n<p>  table的可选标签：<br>  caption  表格标题<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">\t&lt;caption&gt;这是表格标题&lt;/caption&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<p>  thead  表格头部<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">\t&lt;thead&gt;</div><div class=\"line\">\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t&lt;td&gt;这是表头&lt;/td&gt;</div><div class=\"line\">\t\t&lt;/tr&gt;</div><div class=\"line\">\t&lt;/thead&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<p>  tbody  表格主体<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">\t&lt;thead&gt;</div><div class=\"line\">\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t&lt;td&gt;这是表头&lt;/td&gt;</div><div class=\"line\">\t\t&lt;/tr&gt;</div><div class=\"line\">\t&lt;/thead&gt;</div><div class=\"line\">\t&lt;tbody&gt;</div><div class=\"line\">\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t&lt;td&gt;这是表的主体&lt;/td&gt;</div><div class=\"line\">\t\t&lt;/tr&gt;</div><div class=\"line\">\t&lt;/tbody&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<p>  tfoot  表格尾部<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">\t&lt;thead&gt;</div><div class=\"line\">\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t&lt;td&gt;这是表头&lt;/td&gt;</div><div class=\"line\">\t\t&lt;/tr&gt;</div><div class=\"line\">\t&lt;/thead&gt;</div><div class=\"line\">\t&lt;tbody&gt;</div><div class=\"line\">\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t&lt;td&gt;这是表的主体&lt;/td&gt;</div><div class=\"line\">\t\t&lt;/tr&gt;</div><div class=\"line\">\t&lt;/tbody&gt;</div><div class=\"line\">\t&lt;tfoot&gt;</div><div class=\"line\">\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t&lt;td&gt;这是表尾&lt;/td&gt;</div><div class=\"line\">\t\t&lt;/tr&gt;</div><div class=\"line\">\t&lt;/tfoot&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"文本标签\"><a href=\"#文本标签\" class=\"headerlink\" title=\"文本标签\"></a>文本标签</h4><p>文本标签除了p标签外，还有span、i、b等标签</p>\n<h4 id=\"行内元素与块级元素\"><a href=\"#行内元素与块级元素\" class=\"headerlink\" title=\"行内元素与块级元素\"></a><font color=\"#0099ff\" size=\"4\" face=\"黑体\">行内元素与块级元素</font></h4><font color=\"#0099ff\" size=\"3\" face=\"黑体\"><br>    在这里，我将着重讲解一下行内元素与块级元素，这将有助于我们更好的理解HTML元素<br></font><br><font color=\"#97CC89\" size=\"3\" face=\"黑体\"><br>    什么是行内元素和块级元素？<br>    行内元素，顾名思义，就是多个元素能排在一行，当大于一行的长度，才会挤向下一行，就像一个大盒子，里面可以放小盒子，这个小盒子就是行内元素<br>    块级元素，自然就是那个大盒子，它是独占一行的元素，块级元素可以包裹行内元素，也可以包裹块级元素，但是行内元素不可以包裹块级元素<br>    常见的块级元素：p、div、h1等<br>    常见的行内元素：span、i、b等<br></font>\n\n\n<font color=\"#0099ff\" size=\"5\" face=\"黑体\"><br>    一篇文章对于HTML标签的分享是有限的，更多的标签使用可以查看w3cSchool的html在线文档，<a href=\"https://www.w3cschool.cn/html/\" target=\"_blank\" rel=\"external\">在线文档地址</a><br></font>    ","site":{"data":{}},"excerpt":"<p>HTML是如此的简单，相信大部分学过HTML的人都是这样觉得的，不得不说HTML的确没什么难的，只要几小时甚至几十分钟就能掌握，所以这篇文章我会着重讲一点HTML的学前知识。</p>","more":"<h2 id=\"1-URL\"><a href=\"#1-URL\" class=\"headerlink\" title=\"1.URL\"></a>1.URL</h2><p>url的中文翻译是统一资源定位器，通俗来讲，就是我们说的路径，路径又分为相对路径和绝对路径</p>\n<h4 id=\"相对路径\"><a href=\"#相对路径\" class=\"headerlink\" title=\"相对路径\"></a>相对路径</h4><p>从文件当前所在位置出发查找目标位置<br> 1、目标文件与当前文件在同一文件夹下，直接写文件名<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">src=<span class=\"string\">\"1.jpg\"</span></div></pre></td></tr></table></figure></p>\n<p> 2、目标文件在子文件夹下，子文件夹名/文件名<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">src=<span class=\"string\">\"images/1.jpg\"</span></div></pre></td></tr></table></figure></p>\n<p> 3、目标文件在当前文件的上一级目录，../文件名<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">src=<span class=\"string\">\"../1.jpg\"</span></div></pre></td></tr></table></figure></p>\n<p> 4、目标文件在当前文件的上一级目录的子目录里  ../子目录名/文件名<br> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">src=<span class=\"string\">\"../images/1.jpg\"</span></div></pre></td></tr></table></figure></p>\n<p>当目标文件是当前站点下的文件时，可使用相对路径。</p>\n<h4 id=\"绝对路径\"><a href=\"#绝对路径\" class=\"headerlink\" title=\"绝对路径\"></a>绝对路径</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://www.sohu.com/images/1.jpg</div><div class=\"line\">协议名   主机名     目录名 文件名</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ftp://202.112.111.12/images/1.jpg</div><div class=\"line\">协议名  主机IP地址   目录名 文件名</div></pre></td></tr></table></figure>\n<p>从最根本的协议开始完整的表述路径<br>无论在哪个文件里都能找到目标路径<br>当目标文件是其他主机上的文件时，必须使用绝对路径。</p>\n<h2 id=\"常见的图片格式\"><a href=\"#常见的图片格式\" class=\"headerlink\" title=\"常见的图片格式\"></a>常见的图片格式</h2><p>GIF  最多只支持256色。支持动画<br>JPG  支持真彩色<br>PNG  支持透明和半透明，支持真彩色</p>\n<h2 id=\"HTML文件\"><a href=\"#HTML文件\" class=\"headerlink\" title=\"HTML文件\"></a>HTML文件</h2><p>HTML文件就是以.html、.htm、.xhtml等结尾的文件，用来编写HTML代码的</p>\n<h4 id=\"如何在HTML文件中编写代码和运行HTML文件\"><a href=\"#如何在HTML文件中编写代码和运行HTML文件\" class=\"headerlink\" title=\"如何在HTML文件中编写代码和运行HTML文件\"></a>如何在HTML文件中编写代码和运行HTML文件</h4><p>编写HTML代码没有那么多纷繁复杂的配置和安装软件，在windows系统中只需要用自带的文本编辑器即能完成HTML代码的编写，也不需要编译，可以直接在浏览器中运行</p>\n<p>用文本编辑器打开HTML文件，右击 –&gt; 打开方式 –&gt; 选择记事本，即可在记事本开始编写HTML文件</p>\n<p>编写完HTML代码并保存后在浏览器中运行，同样右击 –&gt; 打开方式 –&gt; 选择浏览器，即可在浏览器中查看到效果</p>\n<p>附：当然，在实际工作中很少会直接使用系统自带的编辑器编写，初学者我推荐使用的编辑器可以是EditPlus，sublime text等编辑器</p>\n<h2 id=\"HTML的头部声明\"><a href=\"#HTML的头部声明\" class=\"headerlink\" title=\"HTML的头部声明\"></a>HTML的头部声明</h2><p>头部声明我们也叫&lt;!DOCTYPE&gt; 声明，在 HTML 4.01 中,&lt;!DOCTYPE&gt; 声明引用 DTD,因为 HTML 4.01 基于 SGML。DTD 是一套关于标记符的语法规则。它是XML1.0版规格得一部分,是html文件的验证机制,属于html文件组成的一部分。 DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。</p>\n<p>HTML5 不基于 SGML，所以不需要引用 DTD。</p>\n<p>DTD：三种文档类型：S（Strict）、T（Transitional）、F（Frameset）。<br>Strict：如果您需要干净的标记，免于表现层的混乱，请使用此类型。请与层叠样式表（CSS）配合使用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/html4/strict.dtd\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>Transitional：DTD 可包含 W3C 所期望移入样式表的呈现属性和元素。如果您的读者使用了不支持层叠样式表（CSS）的浏览器以至于您不得不使用 HTML 的呈现特性时使用<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01 Transitional//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/html4/loose.dtd\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>Frameset： DTD 应当被用于带有框架的文档。除 frameset 元素取代了 body 元素之外，Frameset DTD 等同于 Transitional DTD<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE HTML PUBLIC <span class=\"string\">\"-//W3C//DTD HTML 4.01 Frameset//EN\"</span> <span class=\"string\">\"http://www.w3.org/TR/html4/frameset.dtd\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>html5作为现在的主流方向，他的头部声明简单明了<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE HTML&gt;</div></pre></td></tr></table></figure></p>\n<p>这就是HTML5的头部声明了</p>\n<h2 id=\"HTML的结构\"><a href=\"#HTML的结构\" class=\"headerlink\" title=\"HTML的结构\"></a>HTML的结构</h2><p>在HTML的结构中除却头部声明，他由一个html标签包裹，里面分为头标签head和主体标签body</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE HTML&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">\t&lt;head&gt;</div><div class=\"line\">\t\t这是头部</div><div class=\"line\">\t&lt;/head&gt;</div><div class=\"line\">\t&lt;body&gt;</div><div class=\"line\">\t\t这是主体</div><div class=\"line\">\t&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>这些是每个HTML文件必须包含的元素</p>\n<h2 id=\"HTML标签的属性和属性值\"><a href=\"#HTML标签的属性和属性值\" class=\"headerlink\" title=\"HTML标签的属性和属性值\"></a>HTML标签的属性和属性值</h2><p>HTML标签的属性是用来描述标签的一些特性的，前一篇文章我们介绍到，标签就像一个个盒子，那么这些盒子必定会有不同的作用和形态以及材料，比如装水的瓶，它可以是玻璃的材料，长圆柱形；装饼干的盒子，它可以是铁的，长四方体。HTML的标签也是如此，不过它是用属性来描述这些特性，用属性值表现这些特性，比如一个标签它有长高，那么就用width描述长，height描述高，接受属性值表现特性，也可以为其加入边框或者背景颜色，如下<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p width=<span class=\"string\">\"100px\"</span> height=<span class=\"string\">\"100px\"</span> background=<span class=\"string\">\"red\"</span>&gt;</div><div class=\"line\">\t这是文本标签</div><div class=\"line\">&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>说明这个文本标签在页面中占有100px的长和100px的高</p>\n<p>附：px是像素点单位，网页中常用的长度单位，除此之外还有cm，rem等</p>\n<h3 id=\"head标签\"><a href=\"#head标签\" class=\"headerlink\" title=\"head标签\"></a>head标签</h3><p>head标签里的内容不会直接显示在页面的内容之中的，他主要是用来包裹用于声明页面性质和引用外部资源标签的父标签</p>\n<p>附：父标签与子标签</p>\n<p>当标签里面包裹着标签，我们就叫被包裹的标签为子标签，外层包裹的叫父标签，如<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;   // 父标签</div><div class=\"line\">\t&lt;head&gt;   // 子标签</div><div class=\"line\">\t\t这是head</div><div class=\"line\">\t&lt;/head&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"head里常见的声明和外部资源引用标签\"><a href=\"#head里常见的声明和外部资源引用标签\" class=\"headerlink\" title=\"head里常见的声明和外部资源引用标签\"></a>head里常见的声明和外部资源引用标签</h4><h5 id=\"1-meta标签\"><a href=\"#1-meta标签\" class=\"headerlink\" title=\"1.meta标签\"></a>1.meta标签</h5><p>meta标签的作用有：搜索引擎优化（SEO），定义页面使用语言，自动刷新并指向新的页面，实现网页转换时的动态效果，控制页面缓冲，网页定级评价，控制网页显示的窗口等！meta可以接受各种属性值，以确定网页在浏览器中的一些性质，这里我只说一个必不可少的，就是编码的声明，这个是确定页面能否在浏览器中解析正确，如果设置了不正确的编码格式，页面将会乱码（关于编码，可以百度HTML的编码格式，了解更多）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">\t&lt;head&gt;</div><div class=\"line\">\t\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</div><div class=\"line\">\t&lt;/head&gt;</div><div class=\"line\">\t&lt;body&gt;</div><div class=\"line\">\t\t这是主体</div><div class=\"line\">\t&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>charset就是设置编码的格式的属性，UTF-8是通用的编码格式，中文编码格式为GBK</p>\n<h5 id=\"2-title标签\"><a href=\"#2-title标签\" class=\"headerlink\" title=\"2.title标签\"></a>2.title标签</h5><p>title标签是用来设置页面在浏览器标签栏中的标题的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">\t&lt;head&gt;</div><div class=\"line\">\t\t&lt;meta charset=<span class=\"string\">\"UTF-8\"</span>&gt;</div><div class=\"line\">\t\t&lt;title&gt;这是标题&lt;/title&gt;</div><div class=\"line\">\t&lt;/head&gt;</div><div class=\"line\">\t&lt;body&gt;</div><div class=\"line\">\t\t这是主体</div><div class=\"line\">\t&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/title.png\" alt=\"title\"></p>\n<h5 id=\"3-引用外部资源的标签\"><a href=\"#3-引用外部资源的标签\" class=\"headerlink\" title=\"3.引用外部资源的标签\"></a>3.引用外部资源的标签</h5><p>1.link标签<br>引用样式标签，这里我不会讲解样式标签的作用，这将会在css时着重讲解<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"样式文件所在目录的路径\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<p>2.script标签<br>引用脚本文件，这将会在JavaScript中着重讲解<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"脚本文件所在目录的路径\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"主体body标签中的内容\"><a href=\"#主体body标签中的内容\" class=\"headerlink\" title=\"主体body标签中的内容\"></a>主体body标签中的内容</h2><p>body标签里的内容将是呈现在页面中用户看到的实际内容</p>\n<h4 id=\"图像img标签\"><a href=\"#图像img标签\" class=\"headerlink\" title=\"图像img标签\"></a>图像img标签</h4><p>  必备属性：<br>  src 定义图像的url</p>\n<p>  可选属性：<br>  width  宽<br>  height 高<br>  alt  替代文字（多数情况下用title可替代alt，如果图片加载失败，显示在网页上的文字）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"路径\"</span> alt=<span class=\"string\">\"替代文字\"</span>&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"链接a标签\"><a href=\"#链接a标签\" class=\"headerlink\" title=\"链接a标签\"></a>链接a标签</h4><p>  必备属性：<br>  href  链接的目标路径</p>\n<p>  可选属性：<br>  name  命名。命名后的a称之为锚点，可以作为链接目标<br>  target  指定链接在什么样的窗口中打开<br>      _self  默认。当前窗口<br>      _blank  在新建的窗口中打开链接<br>  （title、id、class）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"www.baidu.com\"</span> target=<span class=\"string\">\"_self\"</span>&gt;这是一个链接&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<p>  锚点链接：这是一个特殊的链接方式，可跳到本页面中一个特定位置，这个指向是一个标签属性中的命名锚记或是id。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"#name\"</span>&gt;点击跳转&lt;/a&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;p id=<span class=\"string\">\"name\"</span>&gt;这是要跳转到地方&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>  邮件链接：可以创建一个点击后发送邮件的链接<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;a href=<span class=\"string\">\"mailto:senica@126.com?subject=邮件标题&amp;cc=xxx@126.com&amp;mcc=yyy@126.com\"</span>&gt;发邮件&lt;/a&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"Table标签\"><a href=\"#Table标签\" class=\"headerlink\" title=\"Table标签\"></a>Table标签</h4><p>table是 HTML里的布局工具，前期可用于简单布局<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">  &lt;tr&gt;</div><div class=\"line\">    &lt;td&gt;编号&lt;/td&gt;</div><div class=\"line\">    &lt;td&gt;姓名&lt;/td&gt;</div><div class=\"line\">  &lt;/tr&gt;</div><div class=\"line\">  &lt;tr&gt;</div><div class=\"line\">  \t&lt;td&gt;1&lt;/td&gt;</div><div class=\"line\">  \t&lt;td&gt;Tom&lt;/td&gt;</div><div class=\"line\">  &lt;/tr&gt;</div><div class=\"line\">  &lt;tr&gt;</div><div class=\"line\">  \t&lt;td&gt;1&lt;/td&gt;</div><div class=\"line\">  \t&lt;td&gt;Lucy&lt;/td&gt;</div><div class=\"line\">  &lt;/tr&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/table.png\" alt=\"table\"></p>\n<p>table的组成由外层的table和横行tr，纵行td组成，<br>  table的属性  width、height、border、bordercolor、bgcolor<br>         background、cellspacing、cellpadding、align</p>\n<p>  tr的属性  height  align  vlign<br>  td的属性  width height align vlign colspan  rowspan </p>\n<p>  table的可选标签：<br>  caption  表格标题<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">\t&lt;caption&gt;这是表格标题&lt;/caption&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<p>  thead  表格头部<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">\t&lt;thead&gt;</div><div class=\"line\">\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t&lt;td&gt;这是表头&lt;/td&gt;</div><div class=\"line\">\t\t&lt;/tr&gt;</div><div class=\"line\">\t&lt;/thead&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<p>  tbody  表格主体<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">\t&lt;thead&gt;</div><div class=\"line\">\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t&lt;td&gt;这是表头&lt;/td&gt;</div><div class=\"line\">\t\t&lt;/tr&gt;</div><div class=\"line\">\t&lt;/thead&gt;</div><div class=\"line\">\t&lt;tbody&gt;</div><div class=\"line\">\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t&lt;td&gt;这是表的主体&lt;/td&gt;</div><div class=\"line\">\t\t&lt;/tr&gt;</div><div class=\"line\">\t&lt;/tbody&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<p>  tfoot  表格尾部<br>  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;table&gt;</div><div class=\"line\">\t&lt;thead&gt;</div><div class=\"line\">\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t&lt;td&gt;这是表头&lt;/td&gt;</div><div class=\"line\">\t\t&lt;/tr&gt;</div><div class=\"line\">\t&lt;/thead&gt;</div><div class=\"line\">\t&lt;tbody&gt;</div><div class=\"line\">\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t&lt;td&gt;这是表的主体&lt;/td&gt;</div><div class=\"line\">\t\t&lt;/tr&gt;</div><div class=\"line\">\t&lt;/tbody&gt;</div><div class=\"line\">\t&lt;tfoot&gt;</div><div class=\"line\">\t\t&lt;tr&gt;</div><div class=\"line\">\t\t\t&lt;td&gt;这是表尾&lt;/td&gt;</div><div class=\"line\">\t\t&lt;/tr&gt;</div><div class=\"line\">\t&lt;/tfoot&gt;</div><div class=\"line\">&lt;/table&gt;</div></pre></td></tr></table></figure></p>\n<h4 id=\"文本标签\"><a href=\"#文本标签\" class=\"headerlink\" title=\"文本标签\"></a>文本标签</h4><p>文本标签除了p标签外，还有span、i、b等标签</p>\n<h4 id=\"行内元素与块级元素\"><a href=\"#行内元素与块级元素\" class=\"headerlink\" title=\"行内元素与块级元素\"></a><font color=\"#0099ff\" size=\"4\" face=\"黑体\">行内元素与块级元素</font></h4><font color=\"#0099ff\" size=\"3\" face=\"黑体\"><br>    在这里，我将着重讲解一下行内元素与块级元素，这将有助于我们更好的理解HTML元素<br></font><br><font color=\"#97CC89\" size=\"3\" face=\"黑体\"><br>    什么是行内元素和块级元素？<br>    行内元素，顾名思义，就是多个元素能排在一行，当大于一行的长度，才会挤向下一行，就像一个大盒子，里面可以放小盒子，这个小盒子就是行内元素<br>    块级元素，自然就是那个大盒子，它是独占一行的元素，块级元素可以包裹行内元素，也可以包裹块级元素，但是行内元素不可以包裹块级元素<br>    常见的块级元素：p、div、h1等<br>    常见的行内元素：span、i、b等<br></font>\n\n\n<font color=\"#0099ff\" size=\"5\" face=\"黑体\"><br>    一篇文章对于HTML标签的分享是有限的，更多的标签使用可以查看w3cSchool的html在线文档，<a href=\"https://www.w3cschool.cn/html/\" target=\"_blank\" rel=\"external\">在线文档地址</a><br></font>"},{"title":"css前传","date":"2017-06-20T07:53:32.000Z","_content":"\ncss是什么？为什么会出现css？它有什么神奇之处？\n初学者肯定都会有这几个疑问，这篇文章我会一一介绍，顺便解决在HTML中留下的几个坑。\n\n<!--more-->\n\n## css是什么？\n\n在HTML中我介绍过用HTML的属性为HTML增加一些让我们在网页中可见的一些外观，比如长高，背景色等等，但是当我们使用了大量的属性的时候，会发现标签变得臃肿，且不易维护，代码中内容和属性杂糅，无法阅读，使用大量属性又无法重用，比如两个p，都是一样的背景色，却要连续使用两次属性去设置同样的值，而在实际项目中，都会要求代码可读性强，易维护，可重用，这时候css自然的应运而生，css可以把HTML表现的样式分开，而HTML只关注内容，从而使得代码更加简洁明了，易维护，可重用。\n\nCSS全称Cascading Style Sheet，翻译过来就是层叠样式表，又称级联样式表，简称样式表。\n\n### css的特点\n\n1、实现内容与表现相分离\n2、提高了代码的可重用性和可维护性\n\n### HTML属性 与 CSS 样式的使用原则:\n1、W3C 建议尽量使用 CSS样式取代HTML属性\n2、HTML中的专有属性，无法通过CSS取代的只能选择html属性，如 rowspan、colspan\n\n## 如何使用CSS\n\n既然已经知道了CSS的好处，那么如何在HTML中使用CSS呢？\n\n### 1、内联方式\n     别名：行内样式、内联样式\n\t 特点：将样式属性定义在html标签中\n\t 语法：\n\t    将样式定义在标签的 style 属性中<div style=\"\"></div>\n\t    style属性值 ： 是以 ; 隔开的多个 属性/值 对的内容\n\t    属性 与 值 之间 通过  :  连接\n\t    <div style=\"属性:值;属性:值;\"></div>\n\n\t    常用的属性和值:\n\t    属性            值\n\t    color           颜色英文名称\n\t    font-size       以 px/pt 作为单位的数字\n\t    background-color 颜色英文名称\n``` bash\n<p style=\"background-color:red;font-size:16px\">\n\t这里是一段文本\n</p>\n```\n### 2、内部样式表\n         特点：将 \"样式规则\" 放在 <style>的元素内\n\t     1、在 <head>中添加<style>元素\n\t     2、在 <style> 中增加若干样式规则\n\n\t 样式规则:\n\t    1、选择器 : 规范页面中哪些元素能够使用定义好的样式（在这里我不会解释选择器，大家只要按\n\t    着这样定义即可，我会在css选择器着重讲解css选择器）\n\t    2、样式声明 : 到底元素长的什么样\n\n\t    选择器{\n\t\t样式声明;\n\t\t样式声明;\n\n\t\tcolor:red;\n\t\tfont-size:18px;\n\t\tbackground-color:green;\n\t    }\n``` bash\n<head>\n    \t.\n    \t.\n    \t.\n\t<style>\n\t    p {\n\t\t\tcolor:red;\n\t\t\tfont-size:18px;\n\t\t\tbackground-color:green;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<p>这里是一段文本</p>\n</body>\n```\n### 3、外部样式表\n          特点：\n\t    1、将样式定义在 一个外部的 CSS文件中(以 .css 作为后缀名称的文本文件)\n\t    2、在 css 文件中 添加若干 样式规则\n\t    3、在任何html网页中 引入 独立的 css 文件\n\t       在 head 中 增加以下标记 对外部样式表进行引入\n\t       <link rel=\"stylesheet\" type=\"text/css\" href=\"css文件地址\">\n\n\n","source":"_posts/css前传.md","raw":"---\ntitle: css前传\ndate: 2017-06-20 15:53:32\ntags:\ncategories: css\n---\n\ncss是什么？为什么会出现css？它有什么神奇之处？\n初学者肯定都会有这几个疑问，这篇文章我会一一介绍，顺便解决在HTML中留下的几个坑。\n\n<!--more-->\n\n## css是什么？\n\n在HTML中我介绍过用HTML的属性为HTML增加一些让我们在网页中可见的一些外观，比如长高，背景色等等，但是当我们使用了大量的属性的时候，会发现标签变得臃肿，且不易维护，代码中内容和属性杂糅，无法阅读，使用大量属性又无法重用，比如两个p，都是一样的背景色，却要连续使用两次属性去设置同样的值，而在实际项目中，都会要求代码可读性强，易维护，可重用，这时候css自然的应运而生，css可以把HTML表现的样式分开，而HTML只关注内容，从而使得代码更加简洁明了，易维护，可重用。\n\nCSS全称Cascading Style Sheet，翻译过来就是层叠样式表，又称级联样式表，简称样式表。\n\n### css的特点\n\n1、实现内容与表现相分离\n2、提高了代码的可重用性和可维护性\n\n### HTML属性 与 CSS 样式的使用原则:\n1、W3C 建议尽量使用 CSS样式取代HTML属性\n2、HTML中的专有属性，无法通过CSS取代的只能选择html属性，如 rowspan、colspan\n\n## 如何使用CSS\n\n既然已经知道了CSS的好处，那么如何在HTML中使用CSS呢？\n\n### 1、内联方式\n     别名：行内样式、内联样式\n\t 特点：将样式属性定义在html标签中\n\t 语法：\n\t    将样式定义在标签的 style 属性中<div style=\"\"></div>\n\t    style属性值 ： 是以 ; 隔开的多个 属性/值 对的内容\n\t    属性 与 值 之间 通过  :  连接\n\t    <div style=\"属性:值;属性:值;\"></div>\n\n\t    常用的属性和值:\n\t    属性            值\n\t    color           颜色英文名称\n\t    font-size       以 px/pt 作为单位的数字\n\t    background-color 颜色英文名称\n``` bash\n<p style=\"background-color:red;font-size:16px\">\n\t这里是一段文本\n</p>\n```\n### 2、内部样式表\n         特点：将 \"样式规则\" 放在 <style>的元素内\n\t     1、在 <head>中添加<style>元素\n\t     2、在 <style> 中增加若干样式规则\n\n\t 样式规则:\n\t    1、选择器 : 规范页面中哪些元素能够使用定义好的样式（在这里我不会解释选择器，大家只要按\n\t    着这样定义即可，我会在css选择器着重讲解css选择器）\n\t    2、样式声明 : 到底元素长的什么样\n\n\t    选择器{\n\t\t样式声明;\n\t\t样式声明;\n\n\t\tcolor:red;\n\t\tfont-size:18px;\n\t\tbackground-color:green;\n\t    }\n``` bash\n<head>\n    \t.\n    \t.\n    \t.\n\t<style>\n\t    p {\n\t\t\tcolor:red;\n\t\t\tfont-size:18px;\n\t\t\tbackground-color:green;\n\t\t}\n\t</style>\n</head>\n<body>\n\t<p>这里是一段文本</p>\n</body>\n```\n### 3、外部样式表\n          特点：\n\t    1、将样式定义在 一个外部的 CSS文件中(以 .css 作为后缀名称的文本文件)\n\t    2、在 css 文件中 添加若干 样式规则\n\t    3、在任何html网页中 引入 独立的 css 文件\n\t       在 head 中 增加以下标记 对外部样式表进行引入\n\t       <link rel=\"stylesheet\" type=\"text/css\" href=\"css文件地址\">\n\n\n","slug":"css前传","published":1,"updated":"2017-07-17T00:58:25.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7zzu61g0002v4dnpj51yt1x","content":"<p>css是什么？为什么会出现css？它有什么神奇之处？<br>初学者肯定都会有这几个疑问，这篇文章我会一一介绍，顺便解决在HTML中留下的几个坑。</p>\n<a id=\"more\"></a>\n<h2 id=\"css是什么？\"><a href=\"#css是什么？\" class=\"headerlink\" title=\"css是什么？\"></a>css是什么？</h2><p>在HTML中我介绍过用HTML的属性为HTML增加一些让我们在网页中可见的一些外观，比如长高，背景色等等，但是当我们使用了大量的属性的时候，会发现标签变得臃肿，且不易维护，代码中内容和属性杂糅，无法阅读，使用大量属性又无法重用，比如两个p，都是一样的背景色，却要连续使用两次属性去设置同样的值，而在实际项目中，都会要求代码可读性强，易维护，可重用，这时候css自然的应运而生，css可以把HTML表现的样式分开，而HTML只关注内容，从而使得代码更加简洁明了，易维护，可重用。</p>\n<p>CSS全称Cascading Style Sheet，翻译过来就是层叠样式表，又称级联样式表，简称样式表。</p>\n<h3 id=\"css的特点\"><a href=\"#css的特点\" class=\"headerlink\" title=\"css的特点\"></a>css的特点</h3><p>1、实现内容与表现相分离<br>2、提高了代码的可重用性和可维护性</p>\n<h3 id=\"HTML属性-与-CSS-样式的使用原则\"><a href=\"#HTML属性-与-CSS-样式的使用原则\" class=\"headerlink\" title=\"HTML属性 与 CSS 样式的使用原则:\"></a>HTML属性 与 CSS 样式的使用原则:</h3><p>1、W3C 建议尽量使用 CSS样式取代HTML属性<br>2、HTML中的专有属性，无法通过CSS取代的只能选择html属性，如 rowspan、colspan</p>\n<h2 id=\"如何使用CSS\"><a href=\"#如何使用CSS\" class=\"headerlink\" title=\"如何使用CSS\"></a>如何使用CSS</h2><p>既然已经知道了CSS的好处，那么如何在HTML中使用CSS呢？</p>\n<h3 id=\"1、内联方式\"><a href=\"#1、内联方式\" class=\"headerlink\" title=\"1、内联方式\"></a>1、内联方式</h3><pre><code>别名：行内样式、内联样式\n特点：将样式属性定义在html标签中\n语法：\n   将样式定义在标签的 style 属性中&lt;div style=&quot;&quot;&gt;&lt;/div&gt;\n   style属性值 ： 是以 ; 隔开的多个 属性/值 对的内容\n   属性 与 值 之间 通过  :  连接\n   &lt;div style=&quot;属性:值;属性:值;&quot;&gt;&lt;/div&gt;\n\n   常用的属性和值:\n   属性            值\n   color           颜色英文名称\n   font-size       以 px/pt 作为单位的数字\n   background-color 颜色英文名称\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p style=<span class=\"string\">\"background-color:red;font-size:16px\"</span>&gt;</div><div class=\"line\">\t这里是一段文本</div><div class=\"line\">&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2、内部样式表\"><a href=\"#2、内部样式表\" class=\"headerlink\" title=\"2、内部样式表\"></a>2、内部样式表</h3><pre><code>    特点：将 &quot;样式规则&quot; 放在 &lt;style&gt;的元素内\n    1、在 &lt;head&gt;中添加&lt;style&gt;元素\n    2、在 &lt;style&gt; 中增加若干样式规则\n\n样式规则:\n   1、选择器 : 规范页面中哪些元素能够使用定义好的样式（在这里我不会解释选择器，大家只要按\n   着这样定义即可，我会在css选择器着重讲解css选择器）\n   2、样式声明 : 到底元素长的什么样\n\n   选择器{\n   样式声明;\n   样式声明;\n\n   color:red;\n   font-size:18px;\n   background-color:green;\n   }\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    \t.</div><div class=\"line\">    \t.</div><div class=\"line\">    \t.</div><div class=\"line\">\t&lt;style&gt;</div><div class=\"line\">\t    p &#123;</div><div class=\"line\">\t\t\tcolor:red;</div><div class=\"line\">\t\t\tfont-size:18px;</div><div class=\"line\">\t\t\tbackground-color:green;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&lt;/style&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\t&lt;p&gt;这里是一段文本&lt;/p&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"3、外部样式表\"><a href=\"#3、外部样式表\" class=\"headerlink\" title=\"3、外部样式表\"></a>3、外部样式表</h3><pre><code>  特点：\n1、将样式定义在 一个外部的 CSS文件中(以 .css 作为后缀名称的文本文件)\n2、在 css 文件中 添加若干 样式规则\n3、在任何html网页中 引入 独立的 css 文件\n   在 head 中 增加以下标记 对外部样式表进行引入\n   &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css文件地址&quot;&gt;\n</code></pre>","site":{"data":{}},"excerpt":"<p>css是什么？为什么会出现css？它有什么神奇之处？<br>初学者肯定都会有这几个疑问，这篇文章我会一一介绍，顺便解决在HTML中留下的几个坑。</p>","more":"<h2 id=\"css是什么？\"><a href=\"#css是什么？\" class=\"headerlink\" title=\"css是什么？\"></a>css是什么？</h2><p>在HTML中我介绍过用HTML的属性为HTML增加一些让我们在网页中可见的一些外观，比如长高，背景色等等，但是当我们使用了大量的属性的时候，会发现标签变得臃肿，且不易维护，代码中内容和属性杂糅，无法阅读，使用大量属性又无法重用，比如两个p，都是一样的背景色，却要连续使用两次属性去设置同样的值，而在实际项目中，都会要求代码可读性强，易维护，可重用，这时候css自然的应运而生，css可以把HTML表现的样式分开，而HTML只关注内容，从而使得代码更加简洁明了，易维护，可重用。</p>\n<p>CSS全称Cascading Style Sheet，翻译过来就是层叠样式表，又称级联样式表，简称样式表。</p>\n<h3 id=\"css的特点\"><a href=\"#css的特点\" class=\"headerlink\" title=\"css的特点\"></a>css的特点</h3><p>1、实现内容与表现相分离<br>2、提高了代码的可重用性和可维护性</p>\n<h3 id=\"HTML属性-与-CSS-样式的使用原则\"><a href=\"#HTML属性-与-CSS-样式的使用原则\" class=\"headerlink\" title=\"HTML属性 与 CSS 样式的使用原则:\"></a>HTML属性 与 CSS 样式的使用原则:</h3><p>1、W3C 建议尽量使用 CSS样式取代HTML属性<br>2、HTML中的专有属性，无法通过CSS取代的只能选择html属性，如 rowspan、colspan</p>\n<h2 id=\"如何使用CSS\"><a href=\"#如何使用CSS\" class=\"headerlink\" title=\"如何使用CSS\"></a>如何使用CSS</h2><p>既然已经知道了CSS的好处，那么如何在HTML中使用CSS呢？</p>\n<h3 id=\"1、内联方式\"><a href=\"#1、内联方式\" class=\"headerlink\" title=\"1、内联方式\"></a>1、内联方式</h3><pre><code>别名：行内样式、内联样式\n特点：将样式属性定义在html标签中\n语法：\n   将样式定义在标签的 style 属性中&lt;div style=&quot;&quot;&gt;&lt;/div&gt;\n   style属性值 ： 是以 ; 隔开的多个 属性/值 对的内容\n   属性 与 值 之间 通过  :  连接\n   &lt;div style=&quot;属性:值;属性:值;&quot;&gt;&lt;/div&gt;\n\n   常用的属性和值:\n   属性            值\n   color           颜色英文名称\n   font-size       以 px/pt 作为单位的数字\n   background-color 颜色英文名称\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p style=<span class=\"string\">\"background-color:red;font-size:16px\"</span>&gt;</div><div class=\"line\">\t这里是一段文本</div><div class=\"line\">&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2、内部样式表\"><a href=\"#2、内部样式表\" class=\"headerlink\" title=\"2、内部样式表\"></a>2、内部样式表</h3><pre><code>    特点：将 &quot;样式规则&quot; 放在 &lt;style&gt;的元素内\n    1、在 &lt;head&gt;中添加&lt;style&gt;元素\n    2、在 &lt;style&gt; 中增加若干样式规则\n\n样式规则:\n   1、选择器 : 规范页面中哪些元素能够使用定义好的样式（在这里我不会解释选择器，大家只要按\n   着这样定义即可，我会在css选择器着重讲解css选择器）\n   2、样式声明 : 到底元素长的什么样\n\n   选择器{\n   样式声明;\n   样式声明;\n\n   color:red;\n   font-size:18px;\n   background-color:green;\n   }\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    \t.</div><div class=\"line\">    \t.</div><div class=\"line\">    \t.</div><div class=\"line\">\t&lt;style&gt;</div><div class=\"line\">\t    p &#123;</div><div class=\"line\">\t\t\tcolor:red;</div><div class=\"line\">\t\t\tfont-size:18px;</div><div class=\"line\">\t\t\tbackground-color:green;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&lt;/style&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">\t&lt;p&gt;这里是一段文本&lt;/p&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"3、外部样式表\"><a href=\"#3、外部样式表\" class=\"headerlink\" title=\"3、外部样式表\"></a>3、外部样式表</h3><pre><code>  特点：\n1、将样式定义在 一个外部的 CSS文件中(以 .css 作为后缀名称的文本文件)\n2、在 css 文件中 添加若干 样式规则\n3、在任何html网页中 引入 独立的 css 文件\n   在 head 中 增加以下标记 对外部样式表进行引入\n   &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css文件地址&quot;&gt;\n</code></pre>"},{"title":"css选择器","date":"2017-06-20T08:37:52.000Z","_content":"","source":"_posts/css选择器.md","raw":"---\ntitle: css选择器\ndate: 2017-06-20 16:37:52\ntags:\n---\n","slug":"css选择器","published":1,"updated":"2017-06-20T08:37:52.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7zzu61o0004v4dno1mztrbv","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hexo添加评论和分享功能","date":"2017-06-09T08:31:26.000Z","_content":"\n为了是博客的功能变得更加强大和更具交互性，本文将介绍为hexo添加评论和分享的功能\n\n<!--more-->\n\n## 添加评论的插件\n\nhexo的评论插件最为常用的是国外的discus和国内的多说，但是discus因为墙的原因在国内无法使用，多说在最近关闭了评论功能，但是在next 5.1版本中，已经开放了网易云跟帖接口，所以在这里介绍使用网易云跟帖\n\n### 1.注册网易云跟帖\n\n[注册地址](https://gentie.163.com/index.html)\n\n注册过后登录进入后台管理，找到\n","source":"_posts/hexo添加评论和分享功能.md","raw":"---\ntitle: hexo添加评论和分享功能\ndate: 2017-06-09 16:31:26\ntags:\ncategories: Hexo\n---\n\n为了是博客的功能变得更加强大和更具交互性，本文将介绍为hexo添加评论和分享的功能\n\n<!--more-->\n\n## 添加评论的插件\n\nhexo的评论插件最为常用的是国外的discus和国内的多说，但是discus因为墙的原因在国内无法使用，多说在最近关闭了评论功能，但是在next 5.1版本中，已经开放了网易云跟帖接口，所以在这里介绍使用网易云跟帖\n\n### 1.注册网易云跟帖\n\n[注册地址](https://gentie.163.com/index.html)\n\n注册过后登录进入后台管理，找到\n","slug":"hexo添加评论和分享功能","published":1,"updated":"2017-06-09T08:45:20.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7zzu61t0005v4dnmh926wac","content":"<p>为了是博客的功能变得更加强大和更具交互性，本文将介绍为hexo添加评论和分享的功能</p>\n<a id=\"more\"></a>\n<h2 id=\"添加评论的插件\"><a href=\"#添加评论的插件\" class=\"headerlink\" title=\"添加评论的插件\"></a>添加评论的插件</h2><p>hexo的评论插件最为常用的是国外的discus和国内的多说，但是discus因为墙的原因在国内无法使用，多说在最近关闭了评论功能，但是在next 5.1版本中，已经开放了网易云跟帖接口，所以在这里介绍使用网易云跟帖</p>\n<h3 id=\"1-注册网易云跟帖\"><a href=\"#1-注册网易云跟帖\" class=\"headerlink\" title=\"1.注册网易云跟帖\"></a>1.注册网易云跟帖</h3><p><a href=\"https://gentie.163.com/index.html\" target=\"_blank\" rel=\"external\">注册地址</a></p>\n<p>注册过后登录进入后台管理，找到</p>\n","site":{"data":{}},"excerpt":"<p>为了是博客的功能变得更加强大和更具交互性，本文将介绍为hexo添加评论和分享的功能</p>","more":"<h2 id=\"添加评论的插件\"><a href=\"#添加评论的插件\" class=\"headerlink\" title=\"添加评论的插件\"></a>添加评论的插件</h2><p>hexo的评论插件最为常用的是国外的discus和国内的多说，但是discus因为墙的原因在国内无法使用，多说在最近关闭了评论功能，但是在next 5.1版本中，已经开放了网易云跟帖接口，所以在这里介绍使用网易云跟帖</p>\n<h3 id=\"1-注册网易云跟帖\"><a href=\"#1-注册网易云跟帖\" class=\"headerlink\" title=\"1.注册网易云跟帖\"></a>1.注册网易云跟帖</h3><p><a href=\"https://gentie.163.com/index.html\" target=\"_blank\" rel=\"external\">注册地址</a></p>\n<p>注册过后登录进入后台管理，找到</p>"},{"title":"hexo的一些基本命令","comments":1,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post（创建一个新的页面）\n\n``` bash\n$ hexo new \"My New Post\"\n$ hexo new page categories\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server（启动服务）\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files（打包文件为静态文件）\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites（上传文件到git）\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hexo的常用命令.md","raw":"---\ntitle: hexo的一些基本命令\ncomments: true\ncategories: Hexo\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post（创建一个新的页面）\n\n``` bash\n$ hexo new \"My New Post\"\n$ hexo new page categories\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server（启动服务）\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files（打包文件为静态文件）\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites（上传文件到git）\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hexo的常用命令","published":1,"date":"2017-06-02T03:55:43.028Z","updated":"2017-06-09T06:25:47.190Z","layout":"post","photos":[],"link":"","_id":"cj7zzu61w0006v4dneqxnhqf8","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post（创建一个新的页面）\"><a href=\"#Create-a-new-post（创建一个新的页面）\" class=\"headerlink\" title=\"Create a new post（创建一个新的页面）\"></a>Create a new post（创建一个新的页面）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div><div class=\"line\">$ hexo new page categories</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server（启动服务）\"><a href=\"#Run-server（启动服务）\" class=\"headerlink\" title=\"Run server（启动服务）\"></a>Run server（启动服务）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files（打包文件为静态文件）\"><a href=\"#Generate-static-files（打包文件为静态文件）\" class=\"headerlink\" title=\"Generate static files（打包文件为静态文件）\"></a>Generate static files（打包文件为静态文件）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites（上传文件到git）\"><a href=\"#Deploy-to-remote-sites（上传文件到git）\" class=\"headerlink\" title=\"Deploy to remote sites（上传文件到git）\"></a>Deploy to remote sites（上传文件到git）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post（创建一个新的页面）\"><a href=\"#Create-a-new-post（创建一个新的页面）\" class=\"headerlink\" title=\"Create a new post（创建一个新的页面）\"></a>Create a new post（创建一个新的页面）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div><div class=\"line\">$ hexo new page categories</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server（启动服务）\"><a href=\"#Run-server（启动服务）\" class=\"headerlink\" title=\"Run server（启动服务）\"></a>Run server（启动服务）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files（打包文件为静态文件）\"><a href=\"#Generate-static-files（打包文件为静态文件）\" class=\"headerlink\" title=\"Generate static files（打包文件为静态文件）\"></a>Generate static files（打包文件为静态文件）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites（上传文件到git）\"><a href=\"#Deploy-to-remote-sites（上传文件到git）\" class=\"headerlink\" title=\"Deploy to remote sites（上传文件到git）\"></a>Deploy to remote sites（上传文件到git）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>"},{"title":"hexo的搭建","date":"2017-06-09T01:28:50.000Z","comments":1,"_content":"\n在这里我将简单的介绍什么是hexo和安装hexo,详细的教程请阅读hexo的[官方网站](https://hexo.io/zh-cn/)和[文档](https://hexo.io/zh-cn/docs/)\n(本文仅适合Windows平台)\n<!--more-->\n\n## 什么是Hexo\n\nHexo 是一个简单地、轻量地、基于Node.js的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上，引用Hexo作者 @tommy351 的话：\n\n快速、简单且功能强大的 Node.js 博客框架。A fast, simple & powerful blog framework, powered by Node.js.\n\n## GitHub Pages是什么？\n\nGitHub Pages 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定， 可以用于介绍托管在[github](https://github.com)上的Project或者搭建网站。有两种形式: Project Site 和 User/Org Site，二者之间的差异可以戳 [GitHub Pages](https://pages.github.com/) 。基于 GP 创建Site是很方便的，这有一个简单的教程： 学习 [Github Page](https://pages.github.com/) 教你分分钟搭建自己的博客\n\ngp 生成的网站的默认域名是 username.github.io 或者 username.github.io/project-name ，但gp是支持自定义域名的： Custom Domain Name 。购买域名之后，可以和默认的二级域名进行绑定，购买域名和设置DNS请自行百度\n\n更多关于gp的信息，可以戳： [Github Pages Help](https://help.github.com/categories/github-pages-basics/)\n\n## 安装\n\n### 安装前提\n\n``` bash\ngit\nnode.js\n```\n\n如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\n在本地任何一个目录下Ctrl+shift+鼠标右击，选择命令提示符，输入以下命令即可\n\n``` bash\n$ npm install -g hexo-cli\n```\n\n如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n\n#### 安装git\n\n``` bash\n安装 git.\n```\n\n下载[git](https://git-scm.com/download/win)请戳这里\n\n#### 安装node.js\n\n``` bash\n安装 node.js.\n```\n\n下载[node.js](https://nodejs.org/en/)请戳这里\n\n\n安装好git和node.js，就可以继续安装hexo了（安装node.js是安装hexo所必须的，只有使用node.js的包管理工具npm，才能安装hexo）\n\n``` bash\n$ node -v(查看node版本)\n$ npm -v(查看npm版本)\n$ npm install -g hexo-cli(安装hexo的命令工具)\n```\n\n### 初始化hexo\n安装好hexo-cli后，就可以初始化hexo了，初始化实际上就是建立一个hexo项目文件夹，所以可以在本地选择一个任意地方，新建一个新的博客文件夹，进入该文件夹，Ctrl+shift+鼠标右击打开命令提示符，输入以下命令\n``` bash\n$ hexo init\n```\n当hexo init 按enter键后，出现要填的一些配置，选择默认的配置即可，初始化后会出现一个文件目录，如下\n\n![hexo文件目录](http://orks6qu1s.bkt.clouddn.com/files.png)\n\n这个时候再执行如下命令\n``` bash\n$ npm install\n```\n安装hexo依赖的工具\n\n至此你的hexo已经安装完成，如何使用呢？\n\n当你完成安装hexo时，说明已经可以在本地测试你的hexo，只要在博客目录打开命令提示窗，运行以下命令\n\n``` bash\n$ hexo server(or hexo s)\n```\n![hexo server](http://orks6qu1s.bkt.clouddn.com/hexo-server.png)\n\n这样启动hexo的服务，然后在浏览器地址框输入\n\n``` bash\nlocalhost:4000\n主机名    端口号\n```\n这是hexo默认的端口号，端口号可以在hexo的配置文件中修改，当浏览器出现hexo的欢迎页面，说明安装成功\n\n### 新建第一个hexo页面\n\n``` bash\n$ hexo new 文件名\n```\n\n这样就会在博客目录的source/_post/新建一个.md结尾的文件，用编辑器打开，如下图\n\n![new page](http://orks6qu1s.bkt.clouddn.com/newpage.png)\n\n只要在后面编写，就可以开始你的博客之旅了\n\n### 上传文件到服务器\n\n这只是在本地运行，那么要怎样才能让互联网上的所有人看到呢？\n\n在开始我已经介绍了github这样的免费服务器，它能够支持我们的博客，提供免费的服务，如果你已经在你的github里生成这样的项目，username.github.io的项目，那么就可以将你本地写好的博客上传到这个项目来即可，现在只要在浏览器输入username.github.io就可以访问你的博客了。如果你还没有生成，接下来我将继续提供简单教程，怎么生成github page。\n\n#### 生成github page\n\n首先你要注册一个github账号，[注册地址](https://github.com/)\n\n注册账号后，登录github，这是一个英文网站，英文基础不好的同学不要怕，你们不需要操作很多东西，只要按照方法一步步来，是很简单的，因为我的英语水平也不咋地，可以说很烂\n\n第一步：新建一个仓库，new repository\n\n![new repository](http://orks6qu1s.bkt.clouddn.com/newRepository.png)\n\n第二步：填写仓库的信息\n\n![create repository](http://orks6qu1s.bkt.clouddn.com/createR.png)\n\n第三步：创建完仓库，为github page设置一个默认主题，查看效果，以实验是否生成页面\n\n![create repository](http://orks6qu1s.bkt.clouddn.com/setting.png)\n![create repository](http://orks6qu1s.bkt.clouddn.com/theme.png)\n![create repository](http://orks6qu1s.bkt.clouddn.com/selectTheme.png)\n\n第四步：在浏览器地址栏输入username.github.io，这时出现你刚才选择的主题欢迎页面，说明已经成功，这时候可以clone下项目，删除里面生成的主题文件，以防止把hexo生成的静态文件传入时覆盖\n\n#### 将hexo生成的静态文件上传至服务器\n\n在完成github page搭建后，我们只要把hexo生成的静态文件上传到github即可，那么怎么生成静态文件和上传呢？这里我们要先了解hexo的配置文件_config.yml。这个文件是用来改变hexo主页的一些属性的，比如作者，博客描述等。如下图：\n![config](http://orks6qu1s.bkt.clouddn.com/config.png)\n\n它的路径在你创建的项目的根目录下，用编辑器打开就能进行编辑。\n\n1.生成静态文件\n\n生成静态文件很简单，只要在项目的根目录下打开命令窗口，运行hexo deploy即可\n\n``` bash\n$ hexo generate(or hexo g)\n```\n\n2.配置_config.yml\n\n打开_config.yml，只要在尾部加上\n\n``` bash\ndeploy:\n  type: git\n  repo: https://github.com/yourgithub/yourgithub.github.io.git(你的github项目地址)\n  branch: master\n```\n\n![deploy](http://orks6qu1s.bkt.clouddn.com/deploy.png)\n\n保存好后，在命令窗口执行hexo deploy\n\n\n``` bash\n$ hexo deploy(or hexo d)\n```\n执行hexo d过程中会让你输入github的密码，输入密码回车即可，如果上传成功的话，会在github项目里看到如下目录\n![deploysuccess](http://orks6qu1s.bkt.clouddn.com/deploysuccess.png)\n\n<font color=#0099ff size=4 face=\"黑体\">最后的最后，只要在浏览器里输入yourgithubname.github.io查看效果即可</font>","source":"_posts/hexo的搭建.md","raw":"---\ntitle: hexo的搭建\ndate: 2017-06-09 09:28:50\ntags:\ncomments: true\ncategories: Hexo\n---\n\n在这里我将简单的介绍什么是hexo和安装hexo,详细的教程请阅读hexo的[官方网站](https://hexo.io/zh-cn/)和[文档](https://hexo.io/zh-cn/docs/)\n(本文仅适合Windows平台)\n<!--more-->\n\n## 什么是Hexo\n\nHexo 是一个简单地、轻量地、基于Node.js的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上，引用Hexo作者 @tommy351 的话：\n\n快速、简单且功能强大的 Node.js 博客框架。A fast, simple & powerful blog framework, powered by Node.js.\n\n## GitHub Pages是什么？\n\nGitHub Pages 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定， 可以用于介绍托管在[github](https://github.com)上的Project或者搭建网站。有两种形式: Project Site 和 User/Org Site，二者之间的差异可以戳 [GitHub Pages](https://pages.github.com/) 。基于 GP 创建Site是很方便的，这有一个简单的教程： 学习 [Github Page](https://pages.github.com/) 教你分分钟搭建自己的博客\n\ngp 生成的网站的默认域名是 username.github.io 或者 username.github.io/project-name ，但gp是支持自定义域名的： Custom Domain Name 。购买域名之后，可以和默认的二级域名进行绑定，购买域名和设置DNS请自行百度\n\n更多关于gp的信息，可以戳： [Github Pages Help](https://help.github.com/categories/github-pages-basics/)\n\n## 安装\n\n### 安装前提\n\n``` bash\ngit\nnode.js\n```\n\n如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。\n在本地任何一个目录下Ctrl+shift+鼠标右击，选择命令提示符，输入以下命令即可\n\n``` bash\n$ npm install -g hexo-cli\n```\n\n如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。\n\n#### 安装git\n\n``` bash\n安装 git.\n```\n\n下载[git](https://git-scm.com/download/win)请戳这里\n\n#### 安装node.js\n\n``` bash\n安装 node.js.\n```\n\n下载[node.js](https://nodejs.org/en/)请戳这里\n\n\n安装好git和node.js，就可以继续安装hexo了（安装node.js是安装hexo所必须的，只有使用node.js的包管理工具npm，才能安装hexo）\n\n``` bash\n$ node -v(查看node版本)\n$ npm -v(查看npm版本)\n$ npm install -g hexo-cli(安装hexo的命令工具)\n```\n\n### 初始化hexo\n安装好hexo-cli后，就可以初始化hexo了，初始化实际上就是建立一个hexo项目文件夹，所以可以在本地选择一个任意地方，新建一个新的博客文件夹，进入该文件夹，Ctrl+shift+鼠标右击打开命令提示符，输入以下命令\n``` bash\n$ hexo init\n```\n当hexo init 按enter键后，出现要填的一些配置，选择默认的配置即可，初始化后会出现一个文件目录，如下\n\n![hexo文件目录](http://orks6qu1s.bkt.clouddn.com/files.png)\n\n这个时候再执行如下命令\n``` bash\n$ npm install\n```\n安装hexo依赖的工具\n\n至此你的hexo已经安装完成，如何使用呢？\n\n当你完成安装hexo时，说明已经可以在本地测试你的hexo，只要在博客目录打开命令提示窗，运行以下命令\n\n``` bash\n$ hexo server(or hexo s)\n```\n![hexo server](http://orks6qu1s.bkt.clouddn.com/hexo-server.png)\n\n这样启动hexo的服务，然后在浏览器地址框输入\n\n``` bash\nlocalhost:4000\n主机名    端口号\n```\n这是hexo默认的端口号，端口号可以在hexo的配置文件中修改，当浏览器出现hexo的欢迎页面，说明安装成功\n\n### 新建第一个hexo页面\n\n``` bash\n$ hexo new 文件名\n```\n\n这样就会在博客目录的source/_post/新建一个.md结尾的文件，用编辑器打开，如下图\n\n![new page](http://orks6qu1s.bkt.clouddn.com/newpage.png)\n\n只要在后面编写，就可以开始你的博客之旅了\n\n### 上传文件到服务器\n\n这只是在本地运行，那么要怎样才能让互联网上的所有人看到呢？\n\n在开始我已经介绍了github这样的免费服务器，它能够支持我们的博客，提供免费的服务，如果你已经在你的github里生成这样的项目，username.github.io的项目，那么就可以将你本地写好的博客上传到这个项目来即可，现在只要在浏览器输入username.github.io就可以访问你的博客了。如果你还没有生成，接下来我将继续提供简单教程，怎么生成github page。\n\n#### 生成github page\n\n首先你要注册一个github账号，[注册地址](https://github.com/)\n\n注册账号后，登录github，这是一个英文网站，英文基础不好的同学不要怕，你们不需要操作很多东西，只要按照方法一步步来，是很简单的，因为我的英语水平也不咋地，可以说很烂\n\n第一步：新建一个仓库，new repository\n\n![new repository](http://orks6qu1s.bkt.clouddn.com/newRepository.png)\n\n第二步：填写仓库的信息\n\n![create repository](http://orks6qu1s.bkt.clouddn.com/createR.png)\n\n第三步：创建完仓库，为github page设置一个默认主题，查看效果，以实验是否生成页面\n\n![create repository](http://orks6qu1s.bkt.clouddn.com/setting.png)\n![create repository](http://orks6qu1s.bkt.clouddn.com/theme.png)\n![create repository](http://orks6qu1s.bkt.clouddn.com/selectTheme.png)\n\n第四步：在浏览器地址栏输入username.github.io，这时出现你刚才选择的主题欢迎页面，说明已经成功，这时候可以clone下项目，删除里面生成的主题文件，以防止把hexo生成的静态文件传入时覆盖\n\n#### 将hexo生成的静态文件上传至服务器\n\n在完成github page搭建后，我们只要把hexo生成的静态文件上传到github即可，那么怎么生成静态文件和上传呢？这里我们要先了解hexo的配置文件_config.yml。这个文件是用来改变hexo主页的一些属性的，比如作者，博客描述等。如下图：\n![config](http://orks6qu1s.bkt.clouddn.com/config.png)\n\n它的路径在你创建的项目的根目录下，用编辑器打开就能进行编辑。\n\n1.生成静态文件\n\n生成静态文件很简单，只要在项目的根目录下打开命令窗口，运行hexo deploy即可\n\n``` bash\n$ hexo generate(or hexo g)\n```\n\n2.配置_config.yml\n\n打开_config.yml，只要在尾部加上\n\n``` bash\ndeploy:\n  type: git\n  repo: https://github.com/yourgithub/yourgithub.github.io.git(你的github项目地址)\n  branch: master\n```\n\n![deploy](http://orks6qu1s.bkt.clouddn.com/deploy.png)\n\n保存好后，在命令窗口执行hexo deploy\n\n\n``` bash\n$ hexo deploy(or hexo d)\n```\n执行hexo d过程中会让你输入github的密码，输入密码回车即可，如果上传成功的话，会在github项目里看到如下目录\n![deploysuccess](http://orks6qu1s.bkt.clouddn.com/deploysuccess.png)\n\n<font color=#0099ff size=4 face=\"黑体\">最后的最后，只要在浏览器里输入yourgithubname.github.io查看效果即可</font>","slug":"hexo的搭建","published":1,"updated":"2017-07-15T08:32:29.078Z","layout":"post","photos":[],"link":"","_id":"cj7zzu61z0008v4dnqpo18un1","content":"<p>在这里我将简单的介绍什么是hexo和安装hexo,详细的教程请阅读hexo的<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">官方网站</a>和<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">文档</a><br>(本文仅适合Windows平台)<br><a id=\"more\"></a></p>\n<h2 id=\"什么是Hexo\"><a href=\"#什么是Hexo\" class=\"headerlink\" title=\"什么是Hexo\"></a>什么是Hexo</h2><p>Hexo 是一个简单地、轻量地、基于Node.js的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上，引用Hexo作者 @tommy351 的话：</p>\n<p>快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp; powerful blog framework, powered by Node.js.</p>\n<h2 id=\"GitHub-Pages是什么？\"><a href=\"#GitHub-Pages是什么？\" class=\"headerlink\" title=\"GitHub Pages是什么？\"></a>GitHub Pages是什么？</h2><p>GitHub Pages 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定， 可以用于介绍托管在<a href=\"https://github.com\" target=\"_blank\" rel=\"external\">github</a>上的Project或者搭建网站。有两种形式: Project Site 和 User/Org Site，二者之间的差异可以戳 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">GitHub Pages</a> 。基于 GP 创建Site是很方便的，这有一个简单的教程： 学习 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">Github Page</a> 教你分分钟搭建自己的博客</p>\n<p>gp 生成的网站的默认域名是 username.github.io 或者 username.github.io/project-name ，但gp是支持自定义域名的： Custom Domain Name 。购买域名之后，可以和默认的二级域名进行绑定，购买域名和设置DNS请自行百度</p>\n<p>更多关于gp的信息，可以戳： <a href=\"https://help.github.com/categories/github-pages-basics/\" target=\"_blank\" rel=\"external\">Github Pages Help</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git</div><div class=\"line\">node.js</div></pre></td></tr></table></figure>\n<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。<br>在本地任何一个目录下Ctrl+shift+鼠标右击，选择命令提示符，输入以下命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>\n<h4 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">安装 git.</div></pre></td></tr></table></figure>\n<p>下载<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"external\">git</a>请戳这里</p>\n<h4 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">安装 node.js.</div></pre></td></tr></table></figure>\n<p>下载<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">node.js</a>请戳这里</p>\n<p>安装好git和node.js，就可以继续安装hexo了（安装node.js是安装hexo所必须的，只有使用node.js的包管理工具npm，才能安装hexo）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node -v(查看node版本)</div><div class=\"line\">$ npm -v(查看npm版本)</div><div class=\"line\">$ npm install -g hexo-cli(安装hexo的命令工具)</div></pre></td></tr></table></figure>\n<h3 id=\"初始化hexo\"><a href=\"#初始化hexo\" class=\"headerlink\" title=\"初始化hexo\"></a>初始化hexo</h3><p>安装好hexo-cli后，就可以初始化hexo了，初始化实际上就是建立一个hexo项目文件夹，所以可以在本地选择一个任意地方，新建一个新的博客文件夹，进入该文件夹，Ctrl+shift+鼠标右击打开命令提示符，输入以下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<p>当hexo init 按enter键后，出现要填的一些配置，选择默认的配置即可，初始化后会出现一个文件目录，如下</p>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/files.png\" alt=\"hexo文件目录\"></p>\n<p>这个时候再执行如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p>安装hexo依赖的工具</p>\n<p>至此你的hexo已经安装完成，如何使用呢？</p>\n<p>当你完成安装hexo时，说明已经可以在本地测试你的hexo，只要在博客目录打开命令提示窗，运行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server(or hexo s)</div></pre></td></tr></table></figure>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/hexo-server.png\" alt=\"hexo server\"></p>\n<p>这样启动hexo的服务，然后在浏览器地址框输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">localhost:4000</div><div class=\"line\">主机名    端口号</div></pre></td></tr></table></figure>\n<p>这是hexo默认的端口号，端口号可以在hexo的配置文件中修改，当浏览器出现hexo的欢迎页面，说明安装成功</p>\n<h3 id=\"新建第一个hexo页面\"><a href=\"#新建第一个hexo页面\" class=\"headerlink\" title=\"新建第一个hexo页面\"></a>新建第一个hexo页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new 文件名</div></pre></td></tr></table></figure>\n<p>这样就会在博客目录的source/_post/新建一个.md结尾的文件，用编辑器打开，如下图</p>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/newpage.png\" alt=\"new page\"></p>\n<p>只要在后面编写，就可以开始你的博客之旅了</p>\n<h3 id=\"上传文件到服务器\"><a href=\"#上传文件到服务器\" class=\"headerlink\" title=\"上传文件到服务器\"></a>上传文件到服务器</h3><p>这只是在本地运行，那么要怎样才能让互联网上的所有人看到呢？</p>\n<p>在开始我已经介绍了github这样的免费服务器，它能够支持我们的博客，提供免费的服务，如果你已经在你的github里生成这样的项目，username.github.io的项目，那么就可以将你本地写好的博客上传到这个项目来即可，现在只要在浏览器输入username.github.io就可以访问你的博客了。如果你还没有生成，接下来我将继续提供简单教程，怎么生成github page。</p>\n<h4 id=\"生成github-page\"><a href=\"#生成github-page\" class=\"headerlink\" title=\"生成github page\"></a>生成github page</h4><p>首先你要注册一个github账号，<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">注册地址</a></p>\n<p>注册账号后，登录github，这是一个英文网站，英文基础不好的同学不要怕，你们不需要操作很多东西，只要按照方法一步步来，是很简单的，因为我的英语水平也不咋地，可以说很烂</p>\n<p>第一步：新建一个仓库，new repository</p>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/newRepository.png\" alt=\"new repository\"></p>\n<p>第二步：填写仓库的信息</p>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/createR.png\" alt=\"create repository\"></p>\n<p>第三步：创建完仓库，为github page设置一个默认主题，查看效果，以实验是否生成页面</p>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/setting.png\" alt=\"create repository\"><br><img src=\"http://orks6qu1s.bkt.clouddn.com/theme.png\" alt=\"create repository\"><br><img src=\"http://orks6qu1s.bkt.clouddn.com/selectTheme.png\" alt=\"create repository\"></p>\n<p>第四步：在浏览器地址栏输入username.github.io，这时出现你刚才选择的主题欢迎页面，说明已经成功，这时候可以clone下项目，删除里面生成的主题文件，以防止把hexo生成的静态文件传入时覆盖</p>\n<h4 id=\"将hexo生成的静态文件上传至服务器\"><a href=\"#将hexo生成的静态文件上传至服务器\" class=\"headerlink\" title=\"将hexo生成的静态文件上传至服务器\"></a>将hexo生成的静态文件上传至服务器</h4><p>在完成github page搭建后，我们只要把hexo生成的静态文件上传到github即可，那么怎么生成静态文件和上传呢？这里我们要先了解hexo的配置文件_config.yml。这个文件是用来改变hexo主页的一些属性的，比如作者，博客描述等。如下图：<br><img src=\"http://orks6qu1s.bkt.clouddn.com/config.png\" alt=\"config\"></p>\n<p>它的路径在你创建的项目的根目录下，用编辑器打开就能进行编辑。</p>\n<p>1.生成静态文件</p>\n<p>生成静态文件很简单，只要在项目的根目录下打开命令窗口，运行hexo deploy即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate(or hexo g)</div></pre></td></tr></table></figure>\n<p>2.配置_config.yml</p>\n<p>打开_config.yml，只要在尾部加上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repo: https://github.com/yourgithub/yourgithub.github.io.git(你的github项目地址)</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/deploy.png\" alt=\"deploy\"></p>\n<p>保存好后，在命令窗口执行hexo deploy</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy(or hexo d)</div></pre></td></tr></table></figure>\n<p>执行hexo d过程中会让你输入github的密码，输入密码回车即可，如果上传成功的话，会在github项目里看到如下目录<br><img src=\"http://orks6qu1s.bkt.clouddn.com/deploysuccess.png\" alt=\"deploysuccess\"></p>\n<font color=\"#0099ff\" size=\"4\" face=\"黑体\">最后的最后，只要在浏览器里输入yourgithubname.github.io查看效果即可</font>","site":{"data":{}},"excerpt":"<p>在这里我将简单的介绍什么是hexo和安装hexo,详细的教程请阅读hexo的<a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">官方网站</a>和<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"external\">文档</a><br>(本文仅适合Windows平台)<br>","more":"</p>\n<h2 id=\"什么是Hexo\"><a href=\"#什么是Hexo\" class=\"headerlink\" title=\"什么是Hexo\"></a>什么是Hexo</h2><p>Hexo 是一个简单地、轻量地、基于Node.js的一个静态博客框架，可以方便的生成静态网页托管在github和Heroku上，引用Hexo作者 @tommy351 的话：</p>\n<p>快速、简单且功能强大的 Node.js 博客框架。A fast, simple &amp; powerful blog framework, powered by Node.js.</p>\n<h2 id=\"GitHub-Pages是什么？\"><a href=\"#GitHub-Pages是什么？\" class=\"headerlink\" title=\"GitHub Pages是什么？\"></a>GitHub Pages是什么？</h2><p>GitHub Pages 可以被认为是用户编写的、托管在github上的静态网页。由于它的空间免费稳定， 可以用于介绍托管在<a href=\"https://github.com\" target=\"_blank\" rel=\"external\">github</a>上的Project或者搭建网站。有两种形式: Project Site 和 User/Org Site，二者之间的差异可以戳 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">GitHub Pages</a> 。基于 GP 创建Site是很方便的，这有一个简单的教程： 学习 <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">Github Page</a> 教你分分钟搭建自己的博客</p>\n<p>gp 生成的网站的默认域名是 username.github.io 或者 username.github.io/project-name ，但gp是支持自定义域名的： Custom Domain Name 。购买域名之后，可以和默认的二级域名进行绑定，购买域名和设置DNS请自行百度</p>\n<p>更多关于gp的信息，可以戳： <a href=\"https://help.github.com/categories/github-pages-basics/\" target=\"_blank\" rel=\"external\">Github Pages Help</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git</div><div class=\"line\">node.js</div></pre></td></tr></table></figure>\n<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。<br>在本地任何一个目录下Ctrl+shift+鼠标右击，选择命令提示符，输入以下命令即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p>\n<h4 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">安装 git.</div></pre></td></tr></table></figure>\n<p>下载<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"external\">git</a>请戳这里</p>\n<h4 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">安装 node.js.</div></pre></td></tr></table></figure>\n<p>下载<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">node.js</a>请戳这里</p>\n<p>安装好git和node.js，就可以继续安装hexo了（安装node.js是安装hexo所必须的，只有使用node.js的包管理工具npm，才能安装hexo）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node -v(查看node版本)</div><div class=\"line\">$ npm -v(查看npm版本)</div><div class=\"line\">$ npm install -g hexo-cli(安装hexo的命令工具)</div></pre></td></tr></table></figure>\n<h3 id=\"初始化hexo\"><a href=\"#初始化hexo\" class=\"headerlink\" title=\"初始化hexo\"></a>初始化hexo</h3><p>安装好hexo-cli后，就可以初始化hexo了，初始化实际上就是建立一个hexo项目文件夹，所以可以在本地选择一个任意地方，新建一个新的博客文件夹，进入该文件夹，Ctrl+shift+鼠标右击打开命令提示符，输入以下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<p>当hexo init 按enter键后，出现要填的一些配置，选择默认的配置即可，初始化后会出现一个文件目录，如下</p>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/files.png\" alt=\"hexo文件目录\"></p>\n<p>这个时候再执行如下命令<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install</div></pre></td></tr></table></figure></p>\n<p>安装hexo依赖的工具</p>\n<p>至此你的hexo已经安装完成，如何使用呢？</p>\n<p>当你完成安装hexo时，说明已经可以在本地测试你的hexo，只要在博客目录打开命令提示窗，运行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server(or hexo s)</div></pre></td></tr></table></figure>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/hexo-server.png\" alt=\"hexo server\"></p>\n<p>这样启动hexo的服务，然后在浏览器地址框输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">localhost:4000</div><div class=\"line\">主机名    端口号</div></pre></td></tr></table></figure>\n<p>这是hexo默认的端口号，端口号可以在hexo的配置文件中修改，当浏览器出现hexo的欢迎页面，说明安装成功</p>\n<h3 id=\"新建第一个hexo页面\"><a href=\"#新建第一个hexo页面\" class=\"headerlink\" title=\"新建第一个hexo页面\"></a>新建第一个hexo页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new 文件名</div></pre></td></tr></table></figure>\n<p>这样就会在博客目录的source/_post/新建一个.md结尾的文件，用编辑器打开，如下图</p>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/newpage.png\" alt=\"new page\"></p>\n<p>只要在后面编写，就可以开始你的博客之旅了</p>\n<h3 id=\"上传文件到服务器\"><a href=\"#上传文件到服务器\" class=\"headerlink\" title=\"上传文件到服务器\"></a>上传文件到服务器</h3><p>这只是在本地运行，那么要怎样才能让互联网上的所有人看到呢？</p>\n<p>在开始我已经介绍了github这样的免费服务器，它能够支持我们的博客，提供免费的服务，如果你已经在你的github里生成这样的项目，username.github.io的项目，那么就可以将你本地写好的博客上传到这个项目来即可，现在只要在浏览器输入username.github.io就可以访问你的博客了。如果你还没有生成，接下来我将继续提供简单教程，怎么生成github page。</p>\n<h4 id=\"生成github-page\"><a href=\"#生成github-page\" class=\"headerlink\" title=\"生成github page\"></a>生成github page</h4><p>首先你要注册一个github账号，<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">注册地址</a></p>\n<p>注册账号后，登录github，这是一个英文网站，英文基础不好的同学不要怕，你们不需要操作很多东西，只要按照方法一步步来，是很简单的，因为我的英语水平也不咋地，可以说很烂</p>\n<p>第一步：新建一个仓库，new repository</p>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/newRepository.png\" alt=\"new repository\"></p>\n<p>第二步：填写仓库的信息</p>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/createR.png\" alt=\"create repository\"></p>\n<p>第三步：创建完仓库，为github page设置一个默认主题，查看效果，以实验是否生成页面</p>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/setting.png\" alt=\"create repository\"><br><img src=\"http://orks6qu1s.bkt.clouddn.com/theme.png\" alt=\"create repository\"><br><img src=\"http://orks6qu1s.bkt.clouddn.com/selectTheme.png\" alt=\"create repository\"></p>\n<p>第四步：在浏览器地址栏输入username.github.io，这时出现你刚才选择的主题欢迎页面，说明已经成功，这时候可以clone下项目，删除里面生成的主题文件，以防止把hexo生成的静态文件传入时覆盖</p>\n<h4 id=\"将hexo生成的静态文件上传至服务器\"><a href=\"#将hexo生成的静态文件上传至服务器\" class=\"headerlink\" title=\"将hexo生成的静态文件上传至服务器\"></a>将hexo生成的静态文件上传至服务器</h4><p>在完成github page搭建后，我们只要把hexo生成的静态文件上传到github即可，那么怎么生成静态文件和上传呢？这里我们要先了解hexo的配置文件_config.yml。这个文件是用来改变hexo主页的一些属性的，比如作者，博客描述等。如下图：<br><img src=\"http://orks6qu1s.bkt.clouddn.com/config.png\" alt=\"config\"></p>\n<p>它的路径在你创建的项目的根目录下，用编辑器打开就能进行编辑。</p>\n<p>1.生成静态文件</p>\n<p>生成静态文件很简单，只要在项目的根目录下打开命令窗口，运行hexo deploy即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate(or hexo g)</div></pre></td></tr></table></figure>\n<p>2.配置_config.yml</p>\n<p>打开_config.yml，只要在尾部加上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git</div><div class=\"line\">  repo: https://github.com/yourgithub/yourgithub.github.io.git(你的github项目地址)</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<p><img src=\"http://orks6qu1s.bkt.clouddn.com/deploy.png\" alt=\"deploy\"></p>\n<p>保存好后，在命令窗口执行hexo deploy</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy(or hexo d)</div></pre></td></tr></table></figure>\n<p>执行hexo d过程中会让你输入github的密码，输入密码回车即可，如果上传成功的话，会在github项目里看到如下目录<br><img src=\"http://orks6qu1s.bkt.clouddn.com/deploysuccess.png\" alt=\"deploysuccess\"></p>\n<font color=\"#0099ff\" size=\"4\" face=\"黑体\">最后的最后，只要在浏览器里输入yourgithubname.github.io查看效果即可</font>"},{"title":"html发展历史","date":"2017-06-09T09:25:07.000Z","_content":"\n本文将介绍html是什么？有什么作用？发展历史及未来\n\n<!--more-->\n\n## HTML的发展历史\n\n开始时，准备和大家长篇大论的探讨一下HTML是啥？一大堆的专业术语都准备从百度上粘贴下来，可是啊！刚拿着鼠标选择，发现这样也太无趣了，已经被介绍烂的东西有什么可以再被拿出来讲的必要！于是被粘贴在选择板的内容只能烂在那里，等待下次被覆盖了！\n\n那我要讲些啥呢？很多人，都喜欢听故事，尤其是那些野史，非主流的版本，越八卦越好，所以啊我就翻翻科技八卦新闻了！\n\n可以说互联网已经无处不在，渗透到生活的方方面面，但是很少了解到他的发明人蒂姆.博纳斯.李。博纳斯不仅是个伟大的科学家，也是个多情的家伙，他已经有过两段婚姻，对于第一次媒体报道的很少，第二段可谓被世人关注，她是一个美貌与才华集于一身的完美女性，是美国前花样滑冰运动员，同时又是一个程序员，婚后育有两个孩子，为了能与妻子和孩子多相处，博纳斯拒绝了很多采访，可惜这并不能阻止博纳斯另一段爱情的开始，他与第二任妻子离婚，迅速与一个女企业家坠入爱河。\n\n这些并不能掩盖博纳斯的贡献，讲了一个八卦，还是言归正传吧！HMTL是博纳斯在解决万维网过程中发明的一种超文本标记语言，HTML的全称就是HyperText Markup Language，在1993年6月互联网工程工作小组（IETF）工作草案发布（并非标准），这是第一版，后来连续发布了2.0，3.2，4.0，实际上在3.0后IETF与W3C（World Wide Web Consortium）发生分歧，他们之间的爱恨情仇真是要花很长时间来说，我就不讲了，但是最终他们还是殊途同归，发行共同标准的HTML 5.0，这是联合众多主流浏览器厂商共同发布的统一标准，并希望大部分现代浏览器兼容。HTML5必然是历史发展的主流方向。\n\n## HTML到底是什么？\n\n当我们浏览网页时，看到的图片、文字、视频以及音频等等信息，他们是如何呈现在我们面前的？实际他们就像被装在一个个盒子里，给他们打上标签，这是文字，这是图片，HTML就是那个打上标签的盒子。然后通过链接的标签把两个页面关联，这就形成一个完整的网络。\n\n### HTML标签\n\n这个盒子是怎么表现的呢？实际上就是用一对对闭合的标签表现，例如文本标签就是用p，并加上尖括号包裹p，如下\n\n``` bash\n<p>这是文本标签p</p>\n```\n\n当然，在HTML中不是所有标签都必须闭合，如图片标签\n\n``` bash\n<img src=\"url\" alt=\"一段描述\">\n```\n\n本文只是讲解简单的内容，将会在下一篇文章详细讲解HTML标签\n","source":"_posts/html基础.md","raw":"---\ntitle: html发展历史\ndate: 2017-06-09 17:25:07\ntags:\ncategories: html\n---\n\n本文将介绍html是什么？有什么作用？发展历史及未来\n\n<!--more-->\n\n## HTML的发展历史\n\n开始时，准备和大家长篇大论的探讨一下HTML是啥？一大堆的专业术语都准备从百度上粘贴下来，可是啊！刚拿着鼠标选择，发现这样也太无趣了，已经被介绍烂的东西有什么可以再被拿出来讲的必要！于是被粘贴在选择板的内容只能烂在那里，等待下次被覆盖了！\n\n那我要讲些啥呢？很多人，都喜欢听故事，尤其是那些野史，非主流的版本，越八卦越好，所以啊我就翻翻科技八卦新闻了！\n\n可以说互联网已经无处不在，渗透到生活的方方面面，但是很少了解到他的发明人蒂姆.博纳斯.李。博纳斯不仅是个伟大的科学家，也是个多情的家伙，他已经有过两段婚姻，对于第一次媒体报道的很少，第二段可谓被世人关注，她是一个美貌与才华集于一身的完美女性，是美国前花样滑冰运动员，同时又是一个程序员，婚后育有两个孩子，为了能与妻子和孩子多相处，博纳斯拒绝了很多采访，可惜这并不能阻止博纳斯另一段爱情的开始，他与第二任妻子离婚，迅速与一个女企业家坠入爱河。\n\n这些并不能掩盖博纳斯的贡献，讲了一个八卦，还是言归正传吧！HMTL是博纳斯在解决万维网过程中发明的一种超文本标记语言，HTML的全称就是HyperText Markup Language，在1993年6月互联网工程工作小组（IETF）工作草案发布（并非标准），这是第一版，后来连续发布了2.0，3.2，4.0，实际上在3.0后IETF与W3C（World Wide Web Consortium）发生分歧，他们之间的爱恨情仇真是要花很长时间来说，我就不讲了，但是最终他们还是殊途同归，发行共同标准的HTML 5.0，这是联合众多主流浏览器厂商共同发布的统一标准，并希望大部分现代浏览器兼容。HTML5必然是历史发展的主流方向。\n\n## HTML到底是什么？\n\n当我们浏览网页时，看到的图片、文字、视频以及音频等等信息，他们是如何呈现在我们面前的？实际他们就像被装在一个个盒子里，给他们打上标签，这是文字，这是图片，HTML就是那个打上标签的盒子。然后通过链接的标签把两个页面关联，这就形成一个完整的网络。\n\n### HTML标签\n\n这个盒子是怎么表现的呢？实际上就是用一对对闭合的标签表现，例如文本标签就是用p，并加上尖括号包裹p，如下\n\n``` bash\n<p>这是文本标签p</p>\n```\n\n当然，在HTML中不是所有标签都必须闭合，如图片标签\n\n``` bash\n<img src=\"url\" alt=\"一段描述\">\n```\n\n本文只是讲解简单的内容，将会在下一篇文章详细讲解HTML标签\n","slug":"html基础","published":1,"updated":"2017-06-10T06:33:26.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7zzu628000av4dn9c7lrew2","content":"<p>本文将介绍html是什么？有什么作用？发展历史及未来</p>\n<a id=\"more\"></a>\n<h2 id=\"HTML的发展历史\"><a href=\"#HTML的发展历史\" class=\"headerlink\" title=\"HTML的发展历史\"></a>HTML的发展历史</h2><p>开始时，准备和大家长篇大论的探讨一下HTML是啥？一大堆的专业术语都准备从百度上粘贴下来，可是啊！刚拿着鼠标选择，发现这样也太无趣了，已经被介绍烂的东西有什么可以再被拿出来讲的必要！于是被粘贴在选择板的内容只能烂在那里，等待下次被覆盖了！</p>\n<p>那我要讲些啥呢？很多人，都喜欢听故事，尤其是那些野史，非主流的版本，越八卦越好，所以啊我就翻翻科技八卦新闻了！</p>\n<p>可以说互联网已经无处不在，渗透到生活的方方面面，但是很少了解到他的发明人蒂姆.博纳斯.李。博纳斯不仅是个伟大的科学家，也是个多情的家伙，他已经有过两段婚姻，对于第一次媒体报道的很少，第二段可谓被世人关注，她是一个美貌与才华集于一身的完美女性，是美国前花样滑冰运动员，同时又是一个程序员，婚后育有两个孩子，为了能与妻子和孩子多相处，博纳斯拒绝了很多采访，可惜这并不能阻止博纳斯另一段爱情的开始，他与第二任妻子离婚，迅速与一个女企业家坠入爱河。</p>\n<p>这些并不能掩盖博纳斯的贡献，讲了一个八卦，还是言归正传吧！HMTL是博纳斯在解决万维网过程中发明的一种超文本标记语言，HTML的全称就是HyperText Markup Language，在1993年6月互联网工程工作小组（IETF）工作草案发布（并非标准），这是第一版，后来连续发布了2.0，3.2，4.0，实际上在3.0后IETF与W3C（World Wide Web Consortium）发生分歧，他们之间的爱恨情仇真是要花很长时间来说，我就不讲了，但是最终他们还是殊途同归，发行共同标准的HTML 5.0，这是联合众多主流浏览器厂商共同发布的统一标准，并希望大部分现代浏览器兼容。HTML5必然是历史发展的主流方向。</p>\n<h2 id=\"HTML到底是什么？\"><a href=\"#HTML到底是什么？\" class=\"headerlink\" title=\"HTML到底是什么？\"></a>HTML到底是什么？</h2><p>当我们浏览网页时，看到的图片、文字、视频以及音频等等信息，他们是如何呈现在我们面前的？实际他们就像被装在一个个盒子里，给他们打上标签，这是文字，这是图片，HTML就是那个打上标签的盒子。然后通过链接的标签把两个页面关联，这就形成一个完整的网络。</p>\n<h3 id=\"HTML标签\"><a href=\"#HTML标签\" class=\"headerlink\" title=\"HTML标签\"></a>HTML标签</h3><p>这个盒子是怎么表现的呢？实际上就是用一对对闭合的标签表现，例如文本标签就是用p，并加上尖括号包裹p，如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;这是文本标签p&lt;/p&gt;</div></pre></td></tr></table></figure>\n<p>当然，在HTML中不是所有标签都必须闭合，如图片标签</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"url\"</span> alt=<span class=\"string\">\"一段描述\"</span>&gt;</div></pre></td></tr></table></figure>\n<p>本文只是讲解简单的内容，将会在下一篇文章详细讲解HTML标签</p>\n","site":{"data":{}},"excerpt":"<p>本文将介绍html是什么？有什么作用？发展历史及未来</p>","more":"<h2 id=\"HTML的发展历史\"><a href=\"#HTML的发展历史\" class=\"headerlink\" title=\"HTML的发展历史\"></a>HTML的发展历史</h2><p>开始时，准备和大家长篇大论的探讨一下HTML是啥？一大堆的专业术语都准备从百度上粘贴下来，可是啊！刚拿着鼠标选择，发现这样也太无趣了，已经被介绍烂的东西有什么可以再被拿出来讲的必要！于是被粘贴在选择板的内容只能烂在那里，等待下次被覆盖了！</p>\n<p>那我要讲些啥呢？很多人，都喜欢听故事，尤其是那些野史，非主流的版本，越八卦越好，所以啊我就翻翻科技八卦新闻了！</p>\n<p>可以说互联网已经无处不在，渗透到生活的方方面面，但是很少了解到他的发明人蒂姆.博纳斯.李。博纳斯不仅是个伟大的科学家，也是个多情的家伙，他已经有过两段婚姻，对于第一次媒体报道的很少，第二段可谓被世人关注，她是一个美貌与才华集于一身的完美女性，是美国前花样滑冰运动员，同时又是一个程序员，婚后育有两个孩子，为了能与妻子和孩子多相处，博纳斯拒绝了很多采访，可惜这并不能阻止博纳斯另一段爱情的开始，他与第二任妻子离婚，迅速与一个女企业家坠入爱河。</p>\n<p>这些并不能掩盖博纳斯的贡献，讲了一个八卦，还是言归正传吧！HMTL是博纳斯在解决万维网过程中发明的一种超文本标记语言，HTML的全称就是HyperText Markup Language，在1993年6月互联网工程工作小组（IETF）工作草案发布（并非标准），这是第一版，后来连续发布了2.0，3.2，4.0，实际上在3.0后IETF与W3C（World Wide Web Consortium）发生分歧，他们之间的爱恨情仇真是要花很长时间来说，我就不讲了，但是最终他们还是殊途同归，发行共同标准的HTML 5.0，这是联合众多主流浏览器厂商共同发布的统一标准，并希望大部分现代浏览器兼容。HTML5必然是历史发展的主流方向。</p>\n<h2 id=\"HTML到底是什么？\"><a href=\"#HTML到底是什么？\" class=\"headerlink\" title=\"HTML到底是什么？\"></a>HTML到底是什么？</h2><p>当我们浏览网页时，看到的图片、文字、视频以及音频等等信息，他们是如何呈现在我们面前的？实际他们就像被装在一个个盒子里，给他们打上标签，这是文字，这是图片，HTML就是那个打上标签的盒子。然后通过链接的标签把两个页面关联，这就形成一个完整的网络。</p>\n<h3 id=\"HTML标签\"><a href=\"#HTML标签\" class=\"headerlink\" title=\"HTML标签\"></a>HTML标签</h3><p>这个盒子是怎么表现的呢？实际上就是用一对对闭合的标签表现，例如文本标签就是用p，并加上尖括号包裹p，如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;这是文本标签p&lt;/p&gt;</div></pre></td></tr></table></figure>\n<p>当然，在HTML中不是所有标签都必须闭合，如图片标签</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=<span class=\"string\">\"url\"</span> alt=<span class=\"string\">\"一段描述\"</span>&gt;</div></pre></td></tr></table></figure>\n<p>本文只是讲解简单的内容，将会在下一篇文章详细讲解HTML标签</p>"},{"title":"webpack实现代码热更新","date":"2017-09-15T08:54:30.000Z","_content":"\n前端开发日异月新，怎么可以使我们更好或者更舒服的去做开发呢？我想作为前端开发者来说，肯定都会思考这个问题。在没有接触node.js前，我在做一些静态页面时，经常会来回的切换到浏览器刷新页面，来查看页面效果，这种感觉实在让人崩溃，但是在接触node.js后，发现了一些非常好用的工具，webpack就是其中之一，webpack的火爆，正因为他简单的配置，丰富的集成，使得gulp和grunt都在逐渐逊色，这里我将讲讲webpack实现代码的热更新和生成一个前端工程化项目。\n\n<!--more-->\n\n### 一.安装webpack\n\n安装webpack的前提是需要node的npm包管理的支持，在这里我就不赘述node的安装了，大家可以自行去[node](http://nodejs.cn/)(<font color=\"#f00\">戳这里去node中文网下载和查看帮助文档</font>)官网下载安装。\n\n如果你已经安装好node，那么安装webpack将十分容易，任意地方，打开命令行工具，我们先进行全局安装，输入以下命令即可安装\n\n```bash\n\n$npm install -g webpack\n\n```\n\n<font color=\"#f00\">\n附：\n如果安装失败，很可能因为是使用国外的资源，导致安装失败，在这里我们可以使用一个好用的切换镜像资源的工具nrm，同样他也需要使用npm安装\n```bash\n\n$npm install -g nrm\n\n```\n安装好nrm后，就可以任意切换镜像了，比如使用淘宝的镜像\n```bash\n\n$nrm use cnpm\n\n```\n切换成淘宝镜像后安装包依然使用npm install\n</font>\n\n### 二.初始化一个项目\n\n初始化一个项目是搭建工程化前端项目的基础，他会创建一个重要的文件来描述项目的一些重要信息，这个文件是一个json文件，叫package.json,初始化项目要先建一个你即将要在里面工作的文件夹,然后切换到这个文件夹。在工作文件夹打开命令行工具，输入初始化命令\n\n```bash\n\n$npm init\n\n```\n\n回车后，会让填写一些信息，默认回车即可\n\n这个时候工作目录，就会多出一个文件，package.json文件。package.json文件的作用我就不赘述了，大家可以参考朴灵的《深入浅出Node.js》一书，有详细描述。在此我们再新建一个存放入口文件的目录，比如我建了一个src文件夹。然后在src文件夹依次建一个index.html文件、一个index.js文件、一个index.css文件，建好后，我们即可安装局部webpack，及一些必要模块。\n\n\n### 三.安装局部webpack和模块以及插件\n\n局部安装webpack，只要输入以下命令\n\n```bash\n\n$npm install webpack --save-dev\n\n```\n\n安装完成后，继续安装必要的模块，第一个webpack-dev-server,这个模块主要为页面提供一个服务器和实现热更新主要模块，安装依旧简单\n\n```bash\n\n$npm install webpack-dev-server --save-dev\n\n```\n\n安装完webpack-dev-server后，继续安装html-webpack-plugin，这个插件是用来向入口文件index.html里插入js脚本的，这样就不需要在index.html里引入js，安装依然使用npm\n\n```bash\n\n$npm install html-webpack-plugin --save-dev\n\n```\n\n之后再安装css加载模块，style-loader和css-loader,安装\n\n```bash\n\n$npm install style-loader css-loader --save-dev\n\n```\n\n这样基本完成我们所需要的模块和插件了\n\n### 四.完成webpack.config.js的配置\n\n如何使整个项目运行起来，webpack.config.js起着至关重要的作用，webpack如何加载css，如何打包文件，都是查询这个文件后才会执行的，因此正确配置webpack.config.js非常重要，在工作目录新建一个文件webpack.config.js，如下\n![webpack.config.js](http://orks6qu1s.bkt.clouddn.com/webpack.config.js.png)\n\n#### 1.在文件头部引入必要模块\n\n\tlet path = require('path'), //这个模块是node的自有模块，直接引用即可，它是用来解析路径的\n    \tHtmlWebpackPlugin = require('html-webpack-plugin');\n\n#### 2.开始配置\n\n\tmodule.exports = {\n\t    entry: {\n\t        app: path.resolve(__dirname, 'src', 'index.js')\n\t    },\n\t    output: {\n\t        filename: '[name].js',\n\t        path: path.resolve(__dirname, 'dist')\n\t    },\n\t    plugins: [\n\t        new HtmlWebpackPlugin({\n\t            template: path.resolve(__dirname, 'src', 'index.html')\n\t        })\n\t    ],\n\t    module: {\n\t        rules: [\n\t            {\n\t                test: /\\.css$/,\n\t                loader: ['style-loader', 'css-loader'],\n\t                include: path.resolve(__dirname, 'src')\n\t            }\n\t        ]\n\t    }\n\t};\n\n这个是整个配置，我将逐个介绍他们的意义。\n\n#### 3.各个配置的意义\n\n##### 1.module.exports\n\nmodule.exports就是提供一个向外的接口，所有的配置都挂载在module.exports上，供webpack去查询\n\n##### 2.entry（入口文件）和output（出口文件）\n\nentry是用来配置入口文件的，\n\n\tentry: {\n\t        app: path.resolve(__dirname, 'src', 'index.js')\n\t    }\n\n这里app: path.resolve(__dirname, 'src', 'index.js')的意思是插入到入口文件index.html的js文件路径\n\n\toutput: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist')\n    }\n\nfilename: '[name].js'这是出口文件的命名，即index.js,path: path.resolve(__dirname, 'dist')这是打包后静态资源所存放的目录文件，如果没有，webpack打包后自动创建\n\n##### 3.plugins插件的配置\n\n\tplugins: [\n\t        new HtmlWebpackPlugin({\n\t            template: path.resolve(__dirname, 'src', 'index.html')\n\t        })\n\t    ]\n\nplugins是一个数组，接受多个插件，HtmlWebpackPlugin在前面已经提到，它是将出口文件插入到入口文件index.html的插件，template: path.resolve(__dirname, 'src', 'index.html')即是将出口文件解析到入口文件的路径。\n\n##### 4.module模块\n\n\tmodule: {\n\t        rules: [\n\t            {\n\t                test: /\\.css$/,\n\t                loader: ['style-loader', 'css-loader'],\n\t                include: path.resolve(__dirname, 'src')\n\t            }\n\t        ]\n\t    }\n\n模块是一个对象，可以接受多个属性，rules是用来配置js和css等文件的规则，test接受的是一个正则表达式，判断文件的类型，loader即是加载的模块的名称，接受的是一个数组，include是解析的文件所在的目录\n\n完成配置后，我们就可以进行页面的简单编写了。\n\n### 五.开始项目的编写\n\n这里我们将直接使用js去渲染DOM，css完成样式。\n\n打开index.html,写入基本元素即可。\n\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t    <meta charset=\"UTF-8\">\n\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t    <title>MyApp</title>\n\t</head>\n\t<body>\n\t    \n\t</body>\n\t</html>\n\n之后编写index.js\n\n\timport './index.css'; //引入css文件\n\n\tvar el = document.createElement('div'),\n\t    text = document.createTextNode( \n\t        'Welcome to my app!'\n\t     );\n\n\tel.appendChild(text);\n\tel.id = 'app';\n\tdocument.body.appendChild(el);\n\n最后编写index.css文件\n\n\t#app {\n\t    color: #f00;\n\t}\n\n### 六.运行webpack-dev-server\n\n在工作目录打开命令窗口，直接运行\n\n```bash\n\n$webpack-dev-server --port 3003\n\n```\n\n运行成功后，在浏览器里地址栏输入localhost:3003，查看效果，不出意外将会看到页面上的文字。\n\n到此我们其实已经完成工程化项目的基本构造，那么如何让它进行热更新呢？其实很简单，只要把命令稍稍修改就行\n\n```bash\n\n$webpack-dev-server --inline --hot --port 3003\n\n```\n\n这时候重新加载页面，然后，在css文件里改改字体颜色，直接保存，你会发现，不需要刷新浏览器，也会立刻看到页面文字的颜色变了，这就实现了代码的热更新\n\n<font color=\"#f00\" font-size=\"16px\">\n\t附：\n\t\t如何更加简单的使用命令，只要在起初我们创建的package.json里配置即可，package.json的内容\n</font>\n\n\t{\n\t  \"name\": \"my-app\",\n\t  \"version\": \"1.0.0\",\n\t  \"description\": \"构建一个舒适的前端开发环境\",\n\t  \"main\": \"index.js\",\n\t  \"scripts\": {\n\t    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n\t  },\n\t  \"repository\": {\n\t    \"type\": \"git\",\n\t    \"url\": \"git+https://github.com/xizhouhezai/my-app.git\"\n\t  },\n\t  \"author\": \"\",\n\t  \"license\": \"ISC\",\n\t  \"bugs\": {\n\t    \"url\": \"https://github.com/xizhouhezai/my-app/issues\"\n\t  },\n\t  \"homepage\": \"https://github.com/xizhouhezai/my-app#readme\",\n\t  \"devDependencies\": {\n\t    \"babel-core\": \"^6.26.0\",\n\t    \"babel-loader\": \"^7.1.2\",\n\t    \"babel-preset-env\": \"^1.6.0\",\n\t    \"css-loader\": \"^0.28.7\",\n\t    \"html-webpack-plugin\": \"^2.30.1\",\n\t    \"node-sass\": \"^4.5.3\",\n\t    \"sass-loader\": \"^6.0.6\",\n\t    \"style-loader\": \"^0.18.2\",\n\t    \"webpack\": \"^3.5.5\",\n\t    \"webpack-dev-server\": \"^2.7.1\"\n\t  },\n\t  \"dependencies\": {\n\t    \"express\": \"^4.15.4\"\n\t  }\n\t}\n\n\n<font color=\"#f00\" font-size=\"16px\">\n\t我们只要在scripts加入\n</font>\n\n\t\"start\": webpack-dev-server --inline --hot --port 3003\n\n<font color=\"#f00\" font-size=\"16px\">\n\t最后我们只要运行\n</font>\n\n```bash\n\n$npm run start\n\n```\n\n<font color=\"#f00\" font-size=\"16px\">\n\t这只是测试环境，如何上线，我们只要运行\n</font>\n\n```bash\n\n$webpack\n\n```\n\n<font color=\"#f00\" font-size=\"16px\">\n\t这时候工作目录就会多出一个dist文件夹，我们只要把环境配置到dist，就可以运行项目了\n</font>","source":"_posts/webpack实现代码热更新.md","raw":"---\ntitle: webpack实现代码热更新\ndate: 2017-09-15 16:54:30\ntags: \ncategories: node.js\n---\n\n前端开发日异月新，怎么可以使我们更好或者更舒服的去做开发呢？我想作为前端开发者来说，肯定都会思考这个问题。在没有接触node.js前，我在做一些静态页面时，经常会来回的切换到浏览器刷新页面，来查看页面效果，这种感觉实在让人崩溃，但是在接触node.js后，发现了一些非常好用的工具，webpack就是其中之一，webpack的火爆，正因为他简单的配置，丰富的集成，使得gulp和grunt都在逐渐逊色，这里我将讲讲webpack实现代码的热更新和生成一个前端工程化项目。\n\n<!--more-->\n\n### 一.安装webpack\n\n安装webpack的前提是需要node的npm包管理的支持，在这里我就不赘述node的安装了，大家可以自行去[node](http://nodejs.cn/)(<font color=\"#f00\">戳这里去node中文网下载和查看帮助文档</font>)官网下载安装。\n\n如果你已经安装好node，那么安装webpack将十分容易，任意地方，打开命令行工具，我们先进行全局安装，输入以下命令即可安装\n\n```bash\n\n$npm install -g webpack\n\n```\n\n<font color=\"#f00\">\n附：\n如果安装失败，很可能因为是使用国外的资源，导致安装失败，在这里我们可以使用一个好用的切换镜像资源的工具nrm，同样他也需要使用npm安装\n```bash\n\n$npm install -g nrm\n\n```\n安装好nrm后，就可以任意切换镜像了，比如使用淘宝的镜像\n```bash\n\n$nrm use cnpm\n\n```\n切换成淘宝镜像后安装包依然使用npm install\n</font>\n\n### 二.初始化一个项目\n\n初始化一个项目是搭建工程化前端项目的基础，他会创建一个重要的文件来描述项目的一些重要信息，这个文件是一个json文件，叫package.json,初始化项目要先建一个你即将要在里面工作的文件夹,然后切换到这个文件夹。在工作文件夹打开命令行工具，输入初始化命令\n\n```bash\n\n$npm init\n\n```\n\n回车后，会让填写一些信息，默认回车即可\n\n这个时候工作目录，就会多出一个文件，package.json文件。package.json文件的作用我就不赘述了，大家可以参考朴灵的《深入浅出Node.js》一书，有详细描述。在此我们再新建一个存放入口文件的目录，比如我建了一个src文件夹。然后在src文件夹依次建一个index.html文件、一个index.js文件、一个index.css文件，建好后，我们即可安装局部webpack，及一些必要模块。\n\n\n### 三.安装局部webpack和模块以及插件\n\n局部安装webpack，只要输入以下命令\n\n```bash\n\n$npm install webpack --save-dev\n\n```\n\n安装完成后，继续安装必要的模块，第一个webpack-dev-server,这个模块主要为页面提供一个服务器和实现热更新主要模块，安装依旧简单\n\n```bash\n\n$npm install webpack-dev-server --save-dev\n\n```\n\n安装完webpack-dev-server后，继续安装html-webpack-plugin，这个插件是用来向入口文件index.html里插入js脚本的，这样就不需要在index.html里引入js，安装依然使用npm\n\n```bash\n\n$npm install html-webpack-plugin --save-dev\n\n```\n\n之后再安装css加载模块，style-loader和css-loader,安装\n\n```bash\n\n$npm install style-loader css-loader --save-dev\n\n```\n\n这样基本完成我们所需要的模块和插件了\n\n### 四.完成webpack.config.js的配置\n\n如何使整个项目运行起来，webpack.config.js起着至关重要的作用，webpack如何加载css，如何打包文件，都是查询这个文件后才会执行的，因此正确配置webpack.config.js非常重要，在工作目录新建一个文件webpack.config.js，如下\n![webpack.config.js](http://orks6qu1s.bkt.clouddn.com/webpack.config.js.png)\n\n#### 1.在文件头部引入必要模块\n\n\tlet path = require('path'), //这个模块是node的自有模块，直接引用即可，它是用来解析路径的\n    \tHtmlWebpackPlugin = require('html-webpack-plugin');\n\n#### 2.开始配置\n\n\tmodule.exports = {\n\t    entry: {\n\t        app: path.resolve(__dirname, 'src', 'index.js')\n\t    },\n\t    output: {\n\t        filename: '[name].js',\n\t        path: path.resolve(__dirname, 'dist')\n\t    },\n\t    plugins: [\n\t        new HtmlWebpackPlugin({\n\t            template: path.resolve(__dirname, 'src', 'index.html')\n\t        })\n\t    ],\n\t    module: {\n\t        rules: [\n\t            {\n\t                test: /\\.css$/,\n\t                loader: ['style-loader', 'css-loader'],\n\t                include: path.resolve(__dirname, 'src')\n\t            }\n\t        ]\n\t    }\n\t};\n\n这个是整个配置，我将逐个介绍他们的意义。\n\n#### 3.各个配置的意义\n\n##### 1.module.exports\n\nmodule.exports就是提供一个向外的接口，所有的配置都挂载在module.exports上，供webpack去查询\n\n##### 2.entry（入口文件）和output（出口文件）\n\nentry是用来配置入口文件的，\n\n\tentry: {\n\t        app: path.resolve(__dirname, 'src', 'index.js')\n\t    }\n\n这里app: path.resolve(__dirname, 'src', 'index.js')的意思是插入到入口文件index.html的js文件路径\n\n\toutput: {\n        filename: '[name].js',\n        path: path.resolve(__dirname, 'dist')\n    }\n\nfilename: '[name].js'这是出口文件的命名，即index.js,path: path.resolve(__dirname, 'dist')这是打包后静态资源所存放的目录文件，如果没有，webpack打包后自动创建\n\n##### 3.plugins插件的配置\n\n\tplugins: [\n\t        new HtmlWebpackPlugin({\n\t            template: path.resolve(__dirname, 'src', 'index.html')\n\t        })\n\t    ]\n\nplugins是一个数组，接受多个插件，HtmlWebpackPlugin在前面已经提到，它是将出口文件插入到入口文件index.html的插件，template: path.resolve(__dirname, 'src', 'index.html')即是将出口文件解析到入口文件的路径。\n\n##### 4.module模块\n\n\tmodule: {\n\t        rules: [\n\t            {\n\t                test: /\\.css$/,\n\t                loader: ['style-loader', 'css-loader'],\n\t                include: path.resolve(__dirname, 'src')\n\t            }\n\t        ]\n\t    }\n\n模块是一个对象，可以接受多个属性，rules是用来配置js和css等文件的规则，test接受的是一个正则表达式，判断文件的类型，loader即是加载的模块的名称，接受的是一个数组，include是解析的文件所在的目录\n\n完成配置后，我们就可以进行页面的简单编写了。\n\n### 五.开始项目的编写\n\n这里我们将直接使用js去渲染DOM，css完成样式。\n\n打开index.html,写入基本元素即可。\n\n\t<!DOCTYPE html>\n\t<html lang=\"en\">\n\t<head>\n\t    <meta charset=\"UTF-8\">\n\t    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t    <title>MyApp</title>\n\t</head>\n\t<body>\n\t    \n\t</body>\n\t</html>\n\n之后编写index.js\n\n\timport './index.css'; //引入css文件\n\n\tvar el = document.createElement('div'),\n\t    text = document.createTextNode( \n\t        'Welcome to my app!'\n\t     );\n\n\tel.appendChild(text);\n\tel.id = 'app';\n\tdocument.body.appendChild(el);\n\n最后编写index.css文件\n\n\t#app {\n\t    color: #f00;\n\t}\n\n### 六.运行webpack-dev-server\n\n在工作目录打开命令窗口，直接运行\n\n```bash\n\n$webpack-dev-server --port 3003\n\n```\n\n运行成功后，在浏览器里地址栏输入localhost:3003，查看效果，不出意外将会看到页面上的文字。\n\n到此我们其实已经完成工程化项目的基本构造，那么如何让它进行热更新呢？其实很简单，只要把命令稍稍修改就行\n\n```bash\n\n$webpack-dev-server --inline --hot --port 3003\n\n```\n\n这时候重新加载页面，然后，在css文件里改改字体颜色，直接保存，你会发现，不需要刷新浏览器，也会立刻看到页面文字的颜色变了，这就实现了代码的热更新\n\n<font color=\"#f00\" font-size=\"16px\">\n\t附：\n\t\t如何更加简单的使用命令，只要在起初我们创建的package.json里配置即可，package.json的内容\n</font>\n\n\t{\n\t  \"name\": \"my-app\",\n\t  \"version\": \"1.0.0\",\n\t  \"description\": \"构建一个舒适的前端开发环境\",\n\t  \"main\": \"index.js\",\n\t  \"scripts\": {\n\t    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n\t  },\n\t  \"repository\": {\n\t    \"type\": \"git\",\n\t    \"url\": \"git+https://github.com/xizhouhezai/my-app.git\"\n\t  },\n\t  \"author\": \"\",\n\t  \"license\": \"ISC\",\n\t  \"bugs\": {\n\t    \"url\": \"https://github.com/xizhouhezai/my-app/issues\"\n\t  },\n\t  \"homepage\": \"https://github.com/xizhouhezai/my-app#readme\",\n\t  \"devDependencies\": {\n\t    \"babel-core\": \"^6.26.0\",\n\t    \"babel-loader\": \"^7.1.2\",\n\t    \"babel-preset-env\": \"^1.6.0\",\n\t    \"css-loader\": \"^0.28.7\",\n\t    \"html-webpack-plugin\": \"^2.30.1\",\n\t    \"node-sass\": \"^4.5.3\",\n\t    \"sass-loader\": \"^6.0.6\",\n\t    \"style-loader\": \"^0.18.2\",\n\t    \"webpack\": \"^3.5.5\",\n\t    \"webpack-dev-server\": \"^2.7.1\"\n\t  },\n\t  \"dependencies\": {\n\t    \"express\": \"^4.15.4\"\n\t  }\n\t}\n\n\n<font color=\"#f00\" font-size=\"16px\">\n\t我们只要在scripts加入\n</font>\n\n\t\"start\": webpack-dev-server --inline --hot --port 3003\n\n<font color=\"#f00\" font-size=\"16px\">\n\t最后我们只要运行\n</font>\n\n```bash\n\n$npm run start\n\n```\n\n<font color=\"#f00\" font-size=\"16px\">\n\t这只是测试环境，如何上线，我们只要运行\n</font>\n\n```bash\n\n$webpack\n\n```\n\n<font color=\"#f00\" font-size=\"16px\">\n\t这时候工作目录就会多出一个dist文件夹，我们只要把环境配置到dist，就可以运行项目了\n</font>","slug":"webpack实现代码热更新","published":1,"updated":"2017-09-25T09:45:07.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7zzu62e000cv4dnbvqfg3d6","content":"<p>前端开发日异月新，怎么可以使我们更好或者更舒服的去做开发呢？我想作为前端开发者来说，肯定都会思考这个问题。在没有接触node.js前，我在做一些静态页面时，经常会来回的切换到浏览器刷新页面，来查看页面效果，这种感觉实在让人崩溃，但是在接触node.js后，发现了一些非常好用的工具，webpack就是其中之一，webpack的火爆，正因为他简单的配置，丰富的集成，使得gulp和grunt都在逐渐逊色，这里我将讲讲webpack实现代码的热更新和生成一个前端工程化项目。</p>\n<a id=\"more\"></a>\n<h3 id=\"一-安装webpack\"><a href=\"#一-安装webpack\" class=\"headerlink\" title=\"一.安装webpack\"></a>一.安装webpack</h3><p>安装webpack的前提是需要node的npm包管理的支持，在这里我就不赘述node的安装了，大家可以自行去<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"external\">node</a>(<font color=\"#f00\">戳这里去node中文网下载和查看帮助文档</font>)官网下载安装。</p>\n<p>如果你已经安装好node，那么安装webpack将十分容易，任意地方，打开命令行工具，我们先进行全局安装，输入以下命令即可安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> install -g webpack</div></pre></td></tr></table></figure>\n<font color=\"#f00\"><br>附：<br>如果安装失败，很可能因为是使用国外的资源，导致安装失败，在这里我们可以使用一个好用的切换镜像资源的工具nrm，同样他也需要使用npm安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> install -g nrm</div></pre></td></tr></table></figure><br><br>安装好nrm后，就可以任意切换镜像了，比如使用淘宝的镜像<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$nrm</span> use cnpm</div></pre></td></tr></table></figure><br><br>切换成淘宝镜像后安装包依然使用npm install<br></font>\n\n<h3 id=\"二-初始化一个项目\"><a href=\"#二-初始化一个项目\" class=\"headerlink\" title=\"二.初始化一个项目\"></a>二.初始化一个项目</h3><p>初始化一个项目是搭建工程化前端项目的基础，他会创建一个重要的文件来描述项目的一些重要信息，这个文件是一个json文件，叫package.json,初始化项目要先建一个你即将要在里面工作的文件夹,然后切换到这个文件夹。在工作文件夹打开命令行工具，输入初始化命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> init</div></pre></td></tr></table></figure>\n<p>回车后，会让填写一些信息，默认回车即可</p>\n<p>这个时候工作目录，就会多出一个文件，package.json文件。package.json文件的作用我就不赘述了，大家可以参考朴灵的《深入浅出Node.js》一书，有详细描述。在此我们再新建一个存放入口文件的目录，比如我建了一个src文件夹。然后在src文件夹依次建一个index.html文件、一个index.js文件、一个index.css文件，建好后，我们即可安装局部webpack，及一些必要模块。</p>\n<h3 id=\"三-安装局部webpack和模块以及插件\"><a href=\"#三-安装局部webpack和模块以及插件\" class=\"headerlink\" title=\"三.安装局部webpack和模块以及插件\"></a>三.安装局部webpack和模块以及插件</h3><p>局部安装webpack，只要输入以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> install webpack --save-dev</div></pre></td></tr></table></figure>\n<p>安装完成后，继续安装必要的模块，第一个webpack-dev-server,这个模块主要为页面提供一个服务器和实现热更新主要模块，安装依旧简单</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> install webpack-dev-server --save-dev</div></pre></td></tr></table></figure>\n<p>安装完webpack-dev-server后，继续安装html-webpack-plugin，这个插件是用来向入口文件index.html里插入js脚本的，这样就不需要在index.html里引入js，安装依然使用npm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> install html-webpack-plugin --save-dev</div></pre></td></tr></table></figure>\n<p>之后再安装css加载模块，style-loader和css-loader,安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> install style-loader css-loader --save-dev</div></pre></td></tr></table></figure>\n<p>这样基本完成我们所需要的模块和插件了</p>\n<h3 id=\"四-完成webpack-config-js的配置\"><a href=\"#四-完成webpack-config-js的配置\" class=\"headerlink\" title=\"四.完成webpack.config.js的配置\"></a>四.完成webpack.config.js的配置</h3><p>如何使整个项目运行起来，webpack.config.js起着至关重要的作用，webpack如何加载css，如何打包文件，都是查询这个文件后才会执行的，因此正确配置webpack.config.js非常重要，在工作目录新建一个文件webpack.config.js，如下<br><img src=\"http://orks6qu1s.bkt.clouddn.com/webpack.config.js.png\" alt=\"webpack.config.js\"></p>\n<h4 id=\"1-在文件头部引入必要模块\"><a href=\"#1-在文件头部引入必要模块\" class=\"headerlink\" title=\"1.在文件头部引入必要模块\"></a>1.在文件头部引入必要模块</h4><pre><code>let path = require(&apos;path&apos;), //这个模块是node的自有模块，直接引用即可，它是用来解析路径的\n    HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n</code></pre><h4 id=\"2-开始配置\"><a href=\"#2-开始配置\" class=\"headerlink\" title=\"2.开始配置\"></a>2.开始配置</h4><pre><code>module.exports = {\n    entry: {\n        app: path.resolve(__dirname, &apos;src&apos;, &apos;index.js&apos;)\n    },\n    output: {\n        filename: &apos;[name].js&apos;,\n        path: path.resolve(__dirname, &apos;dist&apos;)\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: path.resolve(__dirname, &apos;src&apos;, &apos;index.html&apos;)\n        })\n    ],\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                loader: [&apos;style-loader&apos;, &apos;css-loader&apos;],\n                include: path.resolve(__dirname, &apos;src&apos;)\n            }\n        ]\n    }\n};\n</code></pre><p>这个是整个配置，我将逐个介绍他们的意义。</p>\n<h4 id=\"3-各个配置的意义\"><a href=\"#3-各个配置的意义\" class=\"headerlink\" title=\"3.各个配置的意义\"></a>3.各个配置的意义</h4><h5 id=\"1-module-exports\"><a href=\"#1-module-exports\" class=\"headerlink\" title=\"1.module.exports\"></a>1.module.exports</h5><p>module.exports就是提供一个向外的接口，所有的配置都挂载在module.exports上，供webpack去查询</p>\n<h5 id=\"2-entry（入口文件）和output（出口文件）\"><a href=\"#2-entry（入口文件）和output（出口文件）\" class=\"headerlink\" title=\"2.entry（入口文件）和output（出口文件）\"></a>2.entry（入口文件）和output（出口文件）</h5><p>entry是用来配置入口文件的，</p>\n<pre><code>entry: {\n        app: path.resolve(__dirname, &apos;src&apos;, &apos;index.js&apos;)\n    }\n</code></pre><p>这里app: path.resolve(__dirname, ‘src’, ‘index.js’)的意思是插入到入口文件index.html的js文件路径</p>\n<pre><code>output: {\n    filename: &apos;[name].js&apos;,\n    path: path.resolve(__dirname, &apos;dist&apos;)\n}\n</code></pre><p>filename: ‘[name].js’这是出口文件的命名，即index.js,path: path.resolve(__dirname, ‘dist’)这是打包后静态资源所存放的目录文件，如果没有，webpack打包后自动创建</p>\n<h5 id=\"3-plugins插件的配置\"><a href=\"#3-plugins插件的配置\" class=\"headerlink\" title=\"3.plugins插件的配置\"></a>3.plugins插件的配置</h5><pre><code>plugins: [\n        new HtmlWebpackPlugin({\n            template: path.resolve(__dirname, &apos;src&apos;, &apos;index.html&apos;)\n        })\n    ]\n</code></pre><p>plugins是一个数组，接受多个插件，HtmlWebpackPlugin在前面已经提到，它是将出口文件插入到入口文件index.html的插件，template: path.resolve(__dirname, ‘src’, ‘index.html’)即是将出口文件解析到入口文件的路径。</p>\n<h5 id=\"4-module模块\"><a href=\"#4-module模块\" class=\"headerlink\" title=\"4.module模块\"></a>4.module模块</h5><pre><code>module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                loader: [&apos;style-loader&apos;, &apos;css-loader&apos;],\n                include: path.resolve(__dirname, &apos;src&apos;)\n            }\n        ]\n    }\n</code></pre><p>模块是一个对象，可以接受多个属性，rules是用来配置js和css等文件的规则，test接受的是一个正则表达式，判断文件的类型，loader即是加载的模块的名称，接受的是一个数组，include是解析的文件所在的目录</p>\n<p>完成配置后，我们就可以进行页面的简单编写了。</p>\n<h3 id=\"五-开始项目的编写\"><a href=\"#五-开始项目的编写\" class=\"headerlink\" title=\"五.开始项目的编写\"></a>五.开始项目的编写</h3><p>这里我们将直接使用js去渲染DOM，css完成样式。</p>\n<p>打开index.html,写入基本元素即可。</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;MyApp&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>之后编写index.js</p>\n<pre><code>import &apos;./index.css&apos;; //引入css文件\n\nvar el = document.createElement(&apos;div&apos;),\n    text = document.createTextNode( \n        &apos;Welcome to my app!&apos;\n     );\n\nel.appendChild(text);\nel.id = &apos;app&apos;;\ndocument.body.appendChild(el);\n</code></pre><p>最后编写index.css文件</p>\n<pre><code>#app {\n    color: #f00;\n}\n</code></pre><h3 id=\"六-运行webpack-dev-server\"><a href=\"#六-运行webpack-dev-server\" class=\"headerlink\" title=\"六.运行webpack-dev-server\"></a>六.运行webpack-dev-server</h3><p>在工作目录打开命令窗口，直接运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$webpack</span>-dev-server --port 3003</div></pre></td></tr></table></figure>\n<p>运行成功后，在浏览器里地址栏输入localhost:3003，查看效果，不出意外将会看到页面上的文字。</p>\n<p>到此我们其实已经完成工程化项目的基本构造，那么如何让它进行热更新呢？其实很简单，只要把命令稍稍修改就行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$webpack</span>-dev-server --inline --hot --port 3003</div></pre></td></tr></table></figure>\n<p>这时候重新加载页面，然后，在css文件里改改字体颜色，直接保存，你会发现，不需要刷新浏览器，也会立刻看到页面文字的颜色变了，这就实现了代码的热更新</p>\n<font color=\"#f00\" font-size=\"16px\"><br>    附：<br>        如何更加简单的使用命令，只要在起初我们创建的package.json里配置即可，package.json的内容<br></font>\n\n<pre><code>{\n  &quot;name&quot;: &quot;my-app&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;构建一个舒适的前端开发环境&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },\n  &quot;repository&quot;: {\n    &quot;type&quot;: &quot;git&quot;,\n    &quot;url&quot;: &quot;git+https://github.com/xizhouhezai/my-app.git&quot;\n  },\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;bugs&quot;: {\n    &quot;url&quot;: &quot;https://github.com/xizhouhezai/my-app/issues&quot;\n  },\n  &quot;homepage&quot;: &quot;https://github.com/xizhouhezai/my-app#readme&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;babel-core&quot;: &quot;^6.26.0&quot;,\n    &quot;babel-loader&quot;: &quot;^7.1.2&quot;,\n    &quot;babel-preset-env&quot;: &quot;^1.6.0&quot;,\n    &quot;css-loader&quot;: &quot;^0.28.7&quot;,\n    &quot;html-webpack-plugin&quot;: &quot;^2.30.1&quot;,\n    &quot;node-sass&quot;: &quot;^4.5.3&quot;,\n    &quot;sass-loader&quot;: &quot;^6.0.6&quot;,\n    &quot;style-loader&quot;: &quot;^0.18.2&quot;,\n    &quot;webpack&quot;: &quot;^3.5.5&quot;,\n    &quot;webpack-dev-server&quot;: &quot;^2.7.1&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;express&quot;: &quot;^4.15.4&quot;\n  }\n}\n</code></pre><font color=\"#f00\" font-size=\"16px\"><br>    我们只要在scripts加入<br></font>\n\n<pre><code>&quot;start&quot;: webpack-dev-server --inline --hot --port 3003\n</code></pre><font color=\"#f00\" font-size=\"16px\"><br>    最后我们只要运行<br></font>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> run start</div></pre></td></tr></table></figure>\n<font color=\"#f00\" font-size=\"16px\"><br>    这只是测试环境，如何上线，我们只要运行<br></font>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$webpack</span></div></pre></td></tr></table></figure>\n<font color=\"#f00\" font-size=\"16px\"><br>    这时候工作目录就会多出一个dist文件夹，我们只要把环境配置到dist，就可以运行项目了<br></font>","site":{"data":{}},"excerpt":"<p>前端开发日异月新，怎么可以使我们更好或者更舒服的去做开发呢？我想作为前端开发者来说，肯定都会思考这个问题。在没有接触node.js前，我在做一些静态页面时，经常会来回的切换到浏览器刷新页面，来查看页面效果，这种感觉实在让人崩溃，但是在接触node.js后，发现了一些非常好用的工具，webpack就是其中之一，webpack的火爆，正因为他简单的配置，丰富的集成，使得gulp和grunt都在逐渐逊色，这里我将讲讲webpack实现代码的热更新和生成一个前端工程化项目。</p>","more":"<h3 id=\"一-安装webpack\"><a href=\"#一-安装webpack\" class=\"headerlink\" title=\"一.安装webpack\"></a>一.安装webpack</h3><p>安装webpack的前提是需要node的npm包管理的支持，在这里我就不赘述node的安装了，大家可以自行去<a href=\"http://nodejs.cn/\" target=\"_blank\" rel=\"external\">node</a>(<font color=\"#f00\">戳这里去node中文网下载和查看帮助文档</font>)官网下载安装。</p>\n<p>如果你已经安装好node，那么安装webpack将十分容易，任意地方，打开命令行工具，我们先进行全局安装，输入以下命令即可安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> install -g webpack</div></pre></td></tr></table></figure>\n<font color=\"#f00\"><br>附：<br>如果安装失败，很可能因为是使用国外的资源，导致安装失败，在这里我们可以使用一个好用的切换镜像资源的工具nrm，同样他也需要使用npm安装<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> install -g nrm</div></pre></td></tr></table></figure><br><br>安装好nrm后，就可以任意切换镜像了，比如使用淘宝的镜像<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$nrm</span> use cnpm</div></pre></td></tr></table></figure><br><br>切换成淘宝镜像后安装包依然使用npm install<br></font>\n\n<h3 id=\"二-初始化一个项目\"><a href=\"#二-初始化一个项目\" class=\"headerlink\" title=\"二.初始化一个项目\"></a>二.初始化一个项目</h3><p>初始化一个项目是搭建工程化前端项目的基础，他会创建一个重要的文件来描述项目的一些重要信息，这个文件是一个json文件，叫package.json,初始化项目要先建一个你即将要在里面工作的文件夹,然后切换到这个文件夹。在工作文件夹打开命令行工具，输入初始化命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> init</div></pre></td></tr></table></figure>\n<p>回车后，会让填写一些信息，默认回车即可</p>\n<p>这个时候工作目录，就会多出一个文件，package.json文件。package.json文件的作用我就不赘述了，大家可以参考朴灵的《深入浅出Node.js》一书，有详细描述。在此我们再新建一个存放入口文件的目录，比如我建了一个src文件夹。然后在src文件夹依次建一个index.html文件、一个index.js文件、一个index.css文件，建好后，我们即可安装局部webpack，及一些必要模块。</p>\n<h3 id=\"三-安装局部webpack和模块以及插件\"><a href=\"#三-安装局部webpack和模块以及插件\" class=\"headerlink\" title=\"三.安装局部webpack和模块以及插件\"></a>三.安装局部webpack和模块以及插件</h3><p>局部安装webpack，只要输入以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> install webpack --save-dev</div></pre></td></tr></table></figure>\n<p>安装完成后，继续安装必要的模块，第一个webpack-dev-server,这个模块主要为页面提供一个服务器和实现热更新主要模块，安装依旧简单</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> install webpack-dev-server --save-dev</div></pre></td></tr></table></figure>\n<p>安装完webpack-dev-server后，继续安装html-webpack-plugin，这个插件是用来向入口文件index.html里插入js脚本的，这样就不需要在index.html里引入js，安装依然使用npm</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> install html-webpack-plugin --save-dev</div></pre></td></tr></table></figure>\n<p>之后再安装css加载模块，style-loader和css-loader,安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> install style-loader css-loader --save-dev</div></pre></td></tr></table></figure>\n<p>这样基本完成我们所需要的模块和插件了</p>\n<h3 id=\"四-完成webpack-config-js的配置\"><a href=\"#四-完成webpack-config-js的配置\" class=\"headerlink\" title=\"四.完成webpack.config.js的配置\"></a>四.完成webpack.config.js的配置</h3><p>如何使整个项目运行起来，webpack.config.js起着至关重要的作用，webpack如何加载css，如何打包文件，都是查询这个文件后才会执行的，因此正确配置webpack.config.js非常重要，在工作目录新建一个文件webpack.config.js，如下<br><img src=\"http://orks6qu1s.bkt.clouddn.com/webpack.config.js.png\" alt=\"webpack.config.js\"></p>\n<h4 id=\"1-在文件头部引入必要模块\"><a href=\"#1-在文件头部引入必要模块\" class=\"headerlink\" title=\"1.在文件头部引入必要模块\"></a>1.在文件头部引入必要模块</h4><pre><code>let path = require(&apos;path&apos;), //这个模块是node的自有模块，直接引用即可，它是用来解析路径的\n    HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);\n</code></pre><h4 id=\"2-开始配置\"><a href=\"#2-开始配置\" class=\"headerlink\" title=\"2.开始配置\"></a>2.开始配置</h4><pre><code>module.exports = {\n    entry: {\n        app: path.resolve(__dirname, &apos;src&apos;, &apos;index.js&apos;)\n    },\n    output: {\n        filename: &apos;[name].js&apos;,\n        path: path.resolve(__dirname, &apos;dist&apos;)\n    },\n    plugins: [\n        new HtmlWebpackPlugin({\n            template: path.resolve(__dirname, &apos;src&apos;, &apos;index.html&apos;)\n        })\n    ],\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                loader: [&apos;style-loader&apos;, &apos;css-loader&apos;],\n                include: path.resolve(__dirname, &apos;src&apos;)\n            }\n        ]\n    }\n};\n</code></pre><p>这个是整个配置，我将逐个介绍他们的意义。</p>\n<h4 id=\"3-各个配置的意义\"><a href=\"#3-各个配置的意义\" class=\"headerlink\" title=\"3.各个配置的意义\"></a>3.各个配置的意义</h4><h5 id=\"1-module-exports\"><a href=\"#1-module-exports\" class=\"headerlink\" title=\"1.module.exports\"></a>1.module.exports</h5><p>module.exports就是提供一个向外的接口，所有的配置都挂载在module.exports上，供webpack去查询</p>\n<h5 id=\"2-entry（入口文件）和output（出口文件）\"><a href=\"#2-entry（入口文件）和output（出口文件）\" class=\"headerlink\" title=\"2.entry（入口文件）和output（出口文件）\"></a>2.entry（入口文件）和output（出口文件）</h5><p>entry是用来配置入口文件的，</p>\n<pre><code>entry: {\n        app: path.resolve(__dirname, &apos;src&apos;, &apos;index.js&apos;)\n    }\n</code></pre><p>这里app: path.resolve(__dirname, ‘src’, ‘index.js’)的意思是插入到入口文件index.html的js文件路径</p>\n<pre><code>output: {\n    filename: &apos;[name].js&apos;,\n    path: path.resolve(__dirname, &apos;dist&apos;)\n}\n</code></pre><p>filename: ‘[name].js’这是出口文件的命名，即index.js,path: path.resolve(__dirname, ‘dist’)这是打包后静态资源所存放的目录文件，如果没有，webpack打包后自动创建</p>\n<h5 id=\"3-plugins插件的配置\"><a href=\"#3-plugins插件的配置\" class=\"headerlink\" title=\"3.plugins插件的配置\"></a>3.plugins插件的配置</h5><pre><code>plugins: [\n        new HtmlWebpackPlugin({\n            template: path.resolve(__dirname, &apos;src&apos;, &apos;index.html&apos;)\n        })\n    ]\n</code></pre><p>plugins是一个数组，接受多个插件，HtmlWebpackPlugin在前面已经提到，它是将出口文件插入到入口文件index.html的插件，template: path.resolve(__dirname, ‘src’, ‘index.html’)即是将出口文件解析到入口文件的路径。</p>\n<h5 id=\"4-module模块\"><a href=\"#4-module模块\" class=\"headerlink\" title=\"4.module模块\"></a>4.module模块</h5><pre><code>module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                loader: [&apos;style-loader&apos;, &apos;css-loader&apos;],\n                include: path.resolve(__dirname, &apos;src&apos;)\n            }\n        ]\n    }\n</code></pre><p>模块是一个对象，可以接受多个属性，rules是用来配置js和css等文件的规则，test接受的是一个正则表达式，判断文件的类型，loader即是加载的模块的名称，接受的是一个数组，include是解析的文件所在的目录</p>\n<p>完成配置后，我们就可以进行页面的简单编写了。</p>\n<h3 id=\"五-开始项目的编写\"><a href=\"#五-开始项目的编写\" class=\"headerlink\" title=\"五.开始项目的编写\"></a>五.开始项目的编写</h3><p>这里我们将直接使用js去渲染DOM，css完成样式。</p>\n<p>打开index.html,写入基本元素即可。</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;\n    &lt;title&gt;MyApp&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>之后编写index.js</p>\n<pre><code>import &apos;./index.css&apos;; //引入css文件\n\nvar el = document.createElement(&apos;div&apos;),\n    text = document.createTextNode( \n        &apos;Welcome to my app!&apos;\n     );\n\nel.appendChild(text);\nel.id = &apos;app&apos;;\ndocument.body.appendChild(el);\n</code></pre><p>最后编写index.css文件</p>\n<pre><code>#app {\n    color: #f00;\n}\n</code></pre><h3 id=\"六-运行webpack-dev-server\"><a href=\"#六-运行webpack-dev-server\" class=\"headerlink\" title=\"六.运行webpack-dev-server\"></a>六.运行webpack-dev-server</h3><p>在工作目录打开命令窗口，直接运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$webpack</span>-dev-server --port 3003</div></pre></td></tr></table></figure>\n<p>运行成功后，在浏览器里地址栏输入localhost:3003，查看效果，不出意外将会看到页面上的文字。</p>\n<p>到此我们其实已经完成工程化项目的基本构造，那么如何让它进行热更新呢？其实很简单，只要把命令稍稍修改就行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$webpack</span>-dev-server --inline --hot --port 3003</div></pre></td></tr></table></figure>\n<p>这时候重新加载页面，然后，在css文件里改改字体颜色，直接保存，你会发现，不需要刷新浏览器，也会立刻看到页面文字的颜色变了，这就实现了代码的热更新</p>\n<font color=\"#f00\" font-size=\"16px\"><br>    附：<br>        如何更加简单的使用命令，只要在起初我们创建的package.json里配置即可，package.json的内容<br></font>\n\n<pre><code>{\n  &quot;name&quot;: &quot;my-app&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;构建一个舒适的前端开发环境&quot;,\n  &quot;main&quot;: &quot;index.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;\n  },\n  &quot;repository&quot;: {\n    &quot;type&quot;: &quot;git&quot;,\n    &quot;url&quot;: &quot;git+https://github.com/xizhouhezai/my-app.git&quot;\n  },\n  &quot;author&quot;: &quot;&quot;,\n  &quot;license&quot;: &quot;ISC&quot;,\n  &quot;bugs&quot;: {\n    &quot;url&quot;: &quot;https://github.com/xizhouhezai/my-app/issues&quot;\n  },\n  &quot;homepage&quot;: &quot;https://github.com/xizhouhezai/my-app#readme&quot;,\n  &quot;devDependencies&quot;: {\n    &quot;babel-core&quot;: &quot;^6.26.0&quot;,\n    &quot;babel-loader&quot;: &quot;^7.1.2&quot;,\n    &quot;babel-preset-env&quot;: &quot;^1.6.0&quot;,\n    &quot;css-loader&quot;: &quot;^0.28.7&quot;,\n    &quot;html-webpack-plugin&quot;: &quot;^2.30.1&quot;,\n    &quot;node-sass&quot;: &quot;^4.5.3&quot;,\n    &quot;sass-loader&quot;: &quot;^6.0.6&quot;,\n    &quot;style-loader&quot;: &quot;^0.18.2&quot;,\n    &quot;webpack&quot;: &quot;^3.5.5&quot;,\n    &quot;webpack-dev-server&quot;: &quot;^2.7.1&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;express&quot;: &quot;^4.15.4&quot;\n  }\n}\n</code></pre><font color=\"#f00\" font-size=\"16px\"><br>    我们只要在scripts加入<br></font>\n\n<pre><code>&quot;start&quot;: webpack-dev-server --inline --hot --port 3003\n</code></pre><font color=\"#f00\" font-size=\"16px\"><br>    最后我们只要运行<br></font>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$npm</span> run start</div></pre></td></tr></table></figure>\n<font color=\"#f00\" font-size=\"16px\"><br>    这只是测试环境，如何上线，我们只要运行<br></font>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"variable\">$webpack</span></div></pre></td></tr></table></figure>\n<font color=\"#f00\" font-size=\"16px\"><br>    这时候工作目录就会多出一个dist文件夹，我们只要把环境配置到dist，就可以运行项目了<br></font>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj7zzu6140000v4dnu0tr4p40","category_id":"cj7zzu61l0003v4dn6odbjmdm","_id":"cj7zzu6270009v4dnetwr2pdl"},{"post_id":"cj7zzu61g0002v4dnpj51yt1x","category_id":"cj7zzu61y0007v4dnfz13632z","_id":"cj7zzu62h000dv4dnekboi6id"},{"post_id":"cj7zzu628000av4dn9c7lrew2","category_id":"cj7zzu61l0003v4dn6odbjmdm","_id":"cj7zzu62m000fv4dn5qxlhn5k"},{"post_id":"cj7zzu61t0005v4dnmh926wac","category_id":"cj7zzu629000bv4dnquacz1t4","_id":"cj7zzu62n000gv4dndp5o8m02"},{"post_id":"cj7zzu61w0006v4dneqxnhqf8","category_id":"cj7zzu629000bv4dnquacz1t4","_id":"cj7zzu62q000iv4dnme4fex5w"},{"post_id":"cj7zzu61z0008v4dnqpo18un1","category_id":"cj7zzu629000bv4dnquacz1t4","_id":"cj7zzu62r000kv4dnw5360mjv"},{"post_id":"cj7zzu62e000cv4dnbvqfg3d6","category_id":"cj7zzu62q000jv4dnpvjd8qfs","_id":"cj7zzu62s000lv4dn6vzox8bq"}],"PostTag":[],"Tag":[]}}